package parsers;

import ast.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nbaMjFma0GHMyVKAej5b4GCIOIq2$6H$IZFyx$ZEARyRHCpQPkS#uyTcPsivNqf4CbYcr" +
		"jF#hhG4FNEjjJsVZ$r4ovzlyOQzJfFOQPKjjge4nxAgYhDDMHf8bEq5Cc3Qcky2F5dBRJNJ" +
		"RCX2gbtAfbmDdTtfg2kf9JIxuKSlMvSUOgpP$LhAovXtJHp9LkuBBffGOghnl3RUrxF86f#" +
		"pEuWmNSmpKym0eUsnupMmV#DfYrSBjqkshtFBuAOy#TTUBpm9yhMBQ1RtY7DzlOQvDziG$V" +
		"$tJxXHJyYuYtJo3c5HF8eGSHRv8uaPDez0ilEZpa");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Prog = StmtList
			RETURN3,	// [1] StmtList = Stmt SEMI StmtList; returns 'StmtList' although none is marked
			RETURN2,	// [2] StmtList = Stmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [3] Stmt = ID EQ Expr; returns 'Expr' although none is marked
			RETURN9,	// [4] Stmt = Expr IF LB Stmt RB COLON LB Stmt RB; returns 'RB' although none is marked
			RETURN5,	// [5] Stmt = Expr IF LB Stmt RB; returns 'RB' although none is marked
			Action.RETURN,	// [6] Stmt = Expr
			RETURN3,	// [7] Expr = Expr MULT Expr; returns 'Expr' although none is marked
			RETURN3,	// [8] Expr = Expr PLUS Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [9] Expr = ID
			Action.RETURN,	// [10] Expr = NUM
			RETURN3	// [11] Expr = AP Expr FP; returns 'FP' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
