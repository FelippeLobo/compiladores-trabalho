package src.classes.parsers;

import src.classes.ast.*;
import src.classes.beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class LangParser extends src.classes.beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbrTq5LKKXl#PIGmWGa1Q4beI0X8mXeH04bgYH48HfGceY1Hf6aN52WZ6Wc01iR1yqIU" +
		"NFhYM3pwWM10BOCK6s10BYegAYeg2SlncEBcPkKcuGLwJk$xpx$#SlVUPCsTczedaBLI91g" +
		"cFUYj7lNIwpb0$5Qf80pL4mrIc3Wd6koGOFrzZLQ4HgjH8ZTFPkaiz4aISbs0ygKxEIGaYv" +
		"kdI11wUBa$WqJJQ#D7HcgvodQcpD5oZZD4bWV#CElkMh2bHNzrXVQSgHHVKyO$NqTWgOfVg" +
		"Hbr9UwTkC6$huWGHgRf8fofTtJHBSuXwGCtClmbdRTB7jojp4qPKgLejT8jkrd8jOrUgGhi" +
		"oMkqZsJ9rdRAKQbuC#OmXPab8L$4SjTJLvWLpX95MaMoTGzdQgfqoDDEyZ5VtY5Tso6kqUa" +
		"RKQH6L6r5z8oelel8ZgY2Y#aVKW8WgZgZIY1eSKKCZwjo8cXXHquwXPXzZxBAGgjRus9vLw" +
		"voGFJzc##$ZALf5pwqwIIUhENlt43stQQskPyzQitUkrkXUx0LuyJFhiUVZrqOTbQQPM5qr" +
		"0RyiJTQ5kW9heHQPP#6h6Br6r#ecBTRjMg6xjLBtQArvHgjrdwG7mVtCsOAPMp9hA#PB9Mz" +
		"RzheTprK7PkXqWkCEr#zHav9PNugQyJtCFE6CyJaJPKpZTsoF8GazcaORFvfBxUjBtSkZyk" +
		"NpZ1K4$aLrzisb6aPzdPXl9txn$l6wRcmXNugYe2qcFZD1H3eHdJcXTUMxrZs8ok7qbMZM9" +
		"dsykv8uWyDUrFIaesft9JvR6ZqP#AI7VB9HMI7jv#l1rrwqwKGqbAq7r#7Ysmclt0QzcbJz" +
		"ok6Ur#oPVyThxToOxRzJ$JZtvl8#bbAt1x5t9VIKuLLE$03sRd1GCRCuD#G6l#7O$Xxt2tv" +
		"EO6NWby5U#SXclrhoRcVp1VBdyh$kFPaZ1zKJ3$zQCbN2kJeDvF0Kh5kku2yLJ9OSladE85" +
		"012i4CoSkGtDuW3um0LS3tdGMF0cLWwj4yxXAQF6FCGUnAspV9yb9YYEMvbZlFzYq3Gu$Qp" +
		"WgQZjPUJRCONWUlWX#57uOVXv#0duBNmq2RuOtmTdWBl0VU1hXcPoSO1dRRl7ijxwSvuDl7" +
		"0#u5zyVBiZbOe$BjEWxJFv0#WoYplXFePwrEVwkvhsvhz1ZWsXnjmCJQ$6v7cffxsOrcYet" +
		"jZFRhnGAh9w6BuN8m7am3Oq4H665zIl0fjtOb6DouDRhpRGptpSi4PQ7rpmPSlpSNZ0JpGA" +
		"aTurdmUe69qNnU4ar5AF#Xa7tOiecBQMOv8#xQSchkX#KkeR4njg#xrLD3OzD3zXpBLPONM" +
		"LvikThoIijhBDjtnNt4ycEMdxJyjEKDuMl#Fo37fdhwjaQrUDQSzhNQVwxSRN4nEqBshf3l" +
		"4VIUqDY#Q9nJ61hByv#hkjTJwzFuTNbzG$436bYx2VaNXFp7nQr$dHhnP$w9MRoZvb1C$Hs" +
		"qVmNjp#17i0zy3xu3Uy6tu1l05yLy1Ru4ky7dO9Vvr7nYVZ1Vco$CP#PZyv7PQNQOxUP3ym" +
		"6ZFmLvtu$DzfxP7$0sg$ymxvW$uNTj$y6W$TsE7ZZQQzMlu1Vp6#t6G6yoRvatpHlcTRFLR" +
		"36RpKlqlM9zNpElHbQ$mVBpvZceaWhYKbayu58xF90CKYnx0Gg2aqdDU1Ad1GVusZ$1#7Kb" +
		"AQXZVM9mg7rU0t2eYfw5GttqGd2ebgw5Ko$o0tWWcHEn0rpibE34tD#Yi1uCv1hzIbg6Vob" +
		"SJ8xoeBAwL5g7$sgQKssJgAyESAco3jKsMHN$0MvnOaK=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Prog = Data.a Function.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Data a = (Data) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Function b = (Function) _symbol_b.value;
					  return new Prog();
				}
			},
			new Action() {	// [1] CmdList = Cmd.s SEMICOLON CmdList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Node l = (Node) _symbol_l.value;
					 return new CmdList();
				}
			},
			new Action() {	// [2] CmdList = Cmd.s SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [3] Cmd = LBRACE Cmd.c RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final Node c = (Node) _symbol_c.value;
					 return c;
				}
			},
			new Action() {	// [4] Cmd = IF LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new If();
				}
			},
			new Action() {	// [5] Cmd = IF LPAREN Exp.e RPAREN Cmd.c ELSE Cmd.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Node m = (Node) _symbol_m.value;
					 return new If();
				}
			},
			new Action() {	// [6] Cmd = ITERATE LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new Iterate();
				}
			},
			new Action() {	// [7] Cmd = READ Lvalue.l SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					 return new Read();
				}
			},
			new Action() {	// [8] Cmd = PRINT Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print();
				}
			},
			new Action() {	// [9] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [11] Cmd = RETURN lst$Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Exp[] e = _list_e == null ? new Exp[0] : (Exp[]) _list_e.toArray(new Exp[_list_e.size()]);
					 return new Return();
				}
			},
			new Action() {	// [12] Cmd = Lvalue.l EQUAL Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Attr();
				}
			},
			new Action() {	// [13] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [14] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN6,	// [15] Cmd = ID.x LPAREN Exps.e RPAREN LESSER lst$Lvalue.v GREATER SEMICOLON; returns 'v' although more are marked
			new Action() {	// [16] Lvalue = ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new ID();
				}
			},
			new Action() {	// [17] Lvalue = Lvalue.v LBRACK Exp.e RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Call();
				}
			},
			new Action() {	// [18] Lvalue = Lvalue.v DOT ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					 return new Call();
				}
			},
			new Action() {	// [19] Exp = Exp.a AND Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new And();
				}
			},
			new Action() {	// [20] Exp = Exp.a OR Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Or();
				}
			},
			Action.RETURN,	// [21] Exp = Rexp
			new Action() {	// [22] Rexp = Exp.a GREATER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Greater();
				}
			},
			new Action() {	// [23] Rexp = Exp.a LESSER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Lesser();
				}
			},
			new Action() {	// [24] Rexp = Exp.a GREATEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new GreaterEqual();
				}
			},
			new Action() {	// [25] Rexp = Exp.a LESSEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new LesserEqual();
				}
			},
			new Action() {	// [26] Rexp = Exp.a EQUALTO Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Equal();
				}
			},
			new Action() {	// [27] Rexp = Exp.a DIF Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Diff();
				}
			},
			Action.RETURN,	// [28] Rexp = Aexp
			new Action() {	// [29] Aexp = Exp.a ADD Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Add();
				}
			},
			new Action() {	// [30] Aexp = Exp.a SUB Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Sub();
				}
			},
			Action.RETURN,	// [31] Aexp = Mexp
			new Action() {	// [32] Mexp = Exp.a MULT Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Mul();
				}
			},
			new Action() {	// [33] Mexp = Exp.a DIV Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Div();
				}
			},
			new Action() {	// [34] Mexp = Exp.a RES Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Res();
				}
			},
			Action.RETURN,	// [35] Mexp = Sexp
			new Action() {	// [36] Sexp = Exp.a NOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return new Not();
				}
			},
			new Action() {	// [37] Sexp = Exp.a TRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return new Tra();
				}
			},
			Action.RETURN,	// [38] Sexp = BOOL
			Action.RETURN,	// [39] Sexp = NULL
			Action.RETURN,	// [40] Sexp = INT
			Action.RETURN,	// [41] Sexp = FLOAT
			Action.RETURN,	// [42] Sexp = CHAR
			Action.RETURN,	// [43] Sexp = Pexp
			Action.RETURN,	// [44] Pexp = Lvalue
			RETURN3,	// [45] Pexp = LPAREN Exp RPAREN; returns 'RPAREN' although none is marked
			RETURN5,	// [46] Pexp = NEW TYPE LBRACK Exp RBRACK; returns 'RBRACK' although none is marked
			new Action() {	// [47] lst$Exps = Exps
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [48] lst$Exps = lst$Exps Exps
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [49] Pexp = ID LPAREN lst$Exps RPAREN LBRACK lst$Exp RBRACK; returns 'RBRACK' although none is marked
			Action.RETURN,	// [50] Exps = lst$Exp
			Action.RETURN,	// [51] Type = TYPE
			Action.RETURN,	// [52] Type = Btype
			Action.RETURN,	// [53] Btype = INT
			Action.RETURN,	// [54] Btype = CHAR
			Action.RETURN,	// [55] Btype = FLOAT
			Action.RETURN,	// [56] Btype = BOOL
			Action.RETURN,	// [57] Btype = ID
			new Action() {	// [58] Parameter = ID.a DOUBLECOLON Type.b COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Parameter();
				}
			},
			new Action() {	// [59] lst$Parameter = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [60] lst$Parameter = lst$Parameter Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [61] Parameters = lst$Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Parameters();
				}
			},
			Action.RETURN,	// [62] Ret = Type.a SEMICOLON COMMA
			new Action() {	// [63] lst$Ret = Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [64] lst$Ret = lst$Ret Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [65] Rets = lst$Ret
			new Action() {	// [66] Function = ID.a LPAREN Parameters.b RPAREN DOUBLECOLON Rets.c LBRACE CmdList.d RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 6];
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					 return new Function();
				}
			},
			new Action() {	// [67] Decl = ID.a DOUBLECOLON Type.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Decl();
				}
			},
			new Action() {	// [68] lst$Decl = Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [69] lst$Decl = lst$Decl Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [70] Decls = lst$Decl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final src.classes.beaver.Symbol[] a = _list_a == null ? new src.classes.beaver.Symbol[0] : (src.classes.beaver.Symbol[]) _list_a.toArray(new src.classes.beaver.Symbol[_list_a.size()]);
					 return new Decls();
				}
			},
			new Action() {	// [71] Data = DATA ID.a LBRACK Decls.b RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 4];
					 return new Data();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
