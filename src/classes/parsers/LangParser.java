package src.classes.parsers;

import src.classes.beaver.*;
import src.classes.ast.*;

import java.io.IOException;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://src.classes.beaver.sourceforge.net">src.classes.beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class LangParser extends src.classes.beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbrbm55KKXl#U2OiG8viX920mIJ0CI7QIG482GKKJ5dT0a2Xea002WgAWe22uW2jQPUc" +
		"JvODM#U23LRZY1hZX2hWWBeWBAeeAYWjw$Rfp6Rg7a0dYOpBrt$ziz$JjFhVxt4ZXQIhJK0" +
		"rGVsNhP9sYNEMhKCKgKOKgLQKafIQ82AjNWeWsEbzZTAfEroYTeRDqchAQds7UqhW4EUCo6" +
		"gFp4iouxB1LJ4emm$LERK7CZ1R4j7fRvgtH50tN25LhfCvKWnPfXUxIP8sFyzoi#QfNMpop" +
		"YBb7D#fuTL947R5sLRfwws9DKotMEUPfdQ3fklMm#hVgnwR7rsevltQwDE6y1hMdLidcPNN" +
		"mrQg1V2VwyjMhmQnJ2f5zgMldG6GjrcwwLrryrawwGwi3rMzGTsLWhrCVZVRPQzJJTvr5kb" +
		"fdwnpYBj1LcX28o$J5rQXVGCi9QD60DZ2W3GfeUG6j8A0L1RJ10Qqqe0q9QEK1RLX06nlGp" +
		"Wre5mQqYmBQ9StuBlTfIpLHIxHOr#iwv3gVN1#JvscsUcYcbfhdOxPwVdMwGdDrhQxaFJr9" +
		"otGByZLKswr913cabRg1QaTqd6hDarg8RO7v1yjjkach#3BSRfxIdLgZkudemDkVJAOKtlT" +
		"Ex1XtTtHZJwMo3nokttn4HSA845b2zBiaEbfRTdfxTcRpCteap1cVKGbpfX$rAbnl#lyKq#" +
		"fjcJTAZnj8Vnj4XykZOWLqEOS#DpZEKu8UvMrsFMvC9VqmZQzM4TQUdAnEublKX#zGFczrN" +
		"wmvTCtu#hVgnwR7ryhnlXR5BSYJHQsoYKtprSg9onV58jwjD9117VsHcLX3d8YoVTOqxziQ" +
		"3SJb4vNcPNPyzk1rtDqJuGfknbBMTAIuLgrfpU7P7QokkmCEoT6OdCnppVVwG5hC5lMgqf4" +
		"nGeNp#PNmdaOuBMHuDSb0BaShfTePd7qpwPlfsAhO5PdU7ifWx0lAi6TXlM#ft3zdD4CAc0" +
		"fofL0sG0#bIc5NxWSoGNSm1XI3qiQveMfGPkM93FEDCVkHQwrjlELPN6S#0fqdDDFQve0Ik" +
		"uR533sil9pXVdWL$0Yy1buBFmXlX1#6jyAFmL$2Jy1xuMT12An79uUpoRr7U8lDkzsoEwUp" +
		"AnyDU1Q3MEyycsCtGu6zZpem7Ti#b6fhMuP#09xDlBPm4iP9ZJug9wSFoBMnoGmBhDoDOQA" +
		"zHWrw3i9AU$r2z3mu7HI12a1jmkGBvzYO4j3RokKWqh9x2sNPEQLW0EZlk#y9WDg6Hu39O1" +
		"YOmlh6MNybO4#4HyKzhoxiXPs7T2VBvqkpjiBW76UONKyaQ0zbMAwmyyC#trXhwshrKJxVL" +
		"9yym$9SomijBx6yml9gosiiFs3v8SkFMdxSybhBw$nh$YyWnuOcR9k2kjFBvzliaxV5pTlX" +
		"cyFx4Thby#s9ondroGKyozGcrZ7cwEyddDBKkfl8dUMRa#ERankCSz$d8$#P0#PlZ$#AMVu" +
		"4VyIqtxrnlpV#0Bu7tu5Tu1lmDVWAy8KmEy4Ey3du57m2jfjjvYFphVd2V6O#DX#Q3ypxPg" +
		"lPOZQRz$3kzlA#6xlQE#P7tzhU1llChuqsyvitxhM#NmAHFu4zvcV65ppz9VEcsMJUCA#Rr" +
		"yohvXNp8hRrDdQZsH3t39wn$9pXUyX$mzNqaMg##aLqaYBaV3YVZfBFsQAHmnwAlNFZGNyI" +
		"vq07k7fxh$D4iRaTQa0C3bqjV0GuzBkmXKFd2$lWq6L25awJoFCG1cr0EywiZdUkBVHEk8U" +
		"ZXBLLmfNa70ANChSAha8V2bTmYYuZPZZoS6mZu79oZ$mNvkHHz0==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};
 private boolean good;
          
          public boolean isGood(){ return good;}
          
          protected void recoverFromError(Symbol token, TokenStream in) throws IOException, src.classes.beaver.Parser.Exception{
              super.recoverFromError(token, in);
              good = false;
          }

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN2,	// [0] Prog = Data.a Function.b; returns 'b' although more are marked
			new Action() {	// [1] Prog = CmdList.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final Node c = (Node) _symbol_c.value;
					  return new Prog();
				}
			},
			new Action() {	// [2] CmdList = Cmd.s SEMICOLON CmdList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Node l = (Node) _symbol_l.value;
					 return new CmdList(s, l);
				}
			},
			new Action() {	// [3] CmdList = Cmd.s SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [4] Cmd = LBRACE Cmd.c RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final Node c = (Node) _symbol_c.value;
					 return c;
				}
			},
			new Action() {	// [5] Cmd = IF LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new If(e, c);
				}
			},
			new Action() {	// [6] Cmd = IF LPAREN Exp.e RPAREN Cmd.c ELSE Cmd.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Node m = (Node) _symbol_m.value;
					 return new If(e, c, m);
				}
			},
			new Action() {	// [7] Cmd = ITERATE LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new Iterate(e, c);
				}
			},
			new Action() {	// [8] Cmd = READ Lvalue.l SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					 return new Read(l);
				}
			},
			new Action() {	// [9] Cmd = PRINT Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [10] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [11] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [12] Cmd = RETURN lst$Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Exp[] e = _list_e == null ? new Exp[0] : (Exp[]) _list_e.toArray(new Exp[_list_e.size()]);
					 return new Return(e);
				}
			},
			new Action() {	// [13] Cmd = Lvalue.l EQUAL Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Attr(l, e);
				}
			},
			new Action() {	// [14] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [16] Cmd = ID.x LPAREN Exps.e RPAREN LESSER lst$Lvalue.v GREATER SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final String x = (String) _symbol_x.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Exp[] e = _list_e == null ? new Exp[0] : (Exp[]) _list_e.toArray(new Exp[_list_e.size()]);
					final Symbol _symbol_v = _symbols[offset + 6];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final String[] v = _list_v == null ? new String[0] : (String[]) _list_v.toArray(new String[_list_v.size()]);
					 return new Call(x, e, v);
				}
			},
			new Action() {	// [17] Lvalue = ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new ID(i);
				}
			},
			new Action() {	// [18] Lvalue = Lvalue.v LBRACK Exp.e RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Call(v, e);
				}
			},
			new Action() {	// [19] Lvalue = Lvalue.v DOT ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					 return new Call(v, i);
				}
			},
			new Action() {	// [20] Exp = Exp.a AND Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new And(a, b);
				}
			},
			new Action() {	// [21] Exp = Exp.a OR Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Or(a, b);
				}
			},
			new Action() {	// [22] Exp = Rexp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					 return e;
				}
			},
			new Action() {	// [23] Rexp = Exp.a GREATER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Greater(a, b);
				}
			},
			new Action() {	// [24] Rexp = Exp.a LESSER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Lesser(a, b);
				}
			},
			new Action() {	// [25] Rexp = Exp.a GREATEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new GreaterEqual(a, b);
				}
			},
			new Action() {	// [26] Rexp = Exp.a LESSEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new LesserEqual(a, b);
				}
			},
			new Action() {	// [27] Rexp = Exp.a EQUALTO Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Equal(a, b);
				}
			},
			new Action() {	// [28] Rexp = Exp.a DIF Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Diff(a, b);
				}
			},
			new Action() {	// [29] Rexp = Aexp.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [30] Aexp = Exp.a ADD Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [31] Aexp = Exp.a SUB Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Sub(a, b);
				}
			},
			new Action() {	// [32] Aexp = Mexp.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [33] Mexp = Exp.a MULT Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Mul(a, b);
				}
			},
			new Action() {	// [34] Mexp = Exp.a DIV Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Div(a, b);
				}
			},
			new Action() {	// [35] Mexp = Exp.a RES Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Res(a, b);
				}
			},
			Action.RETURN,	// [36] Mexp = Sexp.a
			new Action() {	// [37] Sexp = Exp.a NOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [38] Sexp = Exp.a TRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [39] Sexp = BOOL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final boolean a = (boolean) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [40] Sexp = NULL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return null;
				}
			},
			new Action() {	// [41] Sexp = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Integer a = (Integer) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [42] Sexp = FLOAT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Float a = (Float) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [43] Sexp = CHAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final char a = (char) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [44] Sexp = Pexp.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [45] Pexp = Lvalue.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					 return new ID(a);
				}
			},
			new Action() {	// [46] Pexp = LPAREN Exp.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Exp a = (Exp) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [47] Pexp = NEW TYPE.a LBRACK Exp.b RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final Exp b = (Exp) _symbol_b.value;
					 return new Attr(new ID(a), b);
				}
			},
			new Action() {	// [48] Pexp = ID.a LPAREN Exps.b RPAREN LBRACK Exp.c RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final Exp[] b = _list_b == null ? new Exp[0] : (Exp[]) _list_b.toArray(new Exp[_list_b.size()]);
					final Symbol _symbol_c = _symbols[offset + 6];
					final Exp c = (Exp) _symbol_c.value;
					 return new Call(a, b, c);
				}

            
			},
			Action.RETURN,	// [49] Exps = lst$Exp.a
			new Action() {	// [50] Type = TYPE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					 return new ID(a);
				}
			},
			new Action() {	// [51] Type = Btype.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [52] Btype = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Integer a = (Integer) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [53] Btype = CHAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final char a = (char) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [54] Btype = FLOAT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Float a = (Float) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [55] Btype = BOOL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final boolean a = (boolean) _symbol_a.value;
					 return new Btype(a);
				}
			},
			new Action() {	// [56] Btype = ID.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					 return new ID(a);
				}
			},
			new Action() {	// [57] Parameter = ID.a DOUBLECOLON Type.b COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Parameter(a, b);
				}
			},
			new Action() {	// [58] lst$Parameter = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [59] lst$Parameter = lst$Parameter Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [60] Parameters = lst$Parameter.a
			new Action() {	// [61] Ret = Type.a SEMICOLON COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [62] lst$Ret = Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [63] lst$Ret = lst$Ret Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [65] Function = ID.a LPAREN Parameters.b RPAREN DOUBLECOLON Rets.c LBRACE CmdList.d RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 6];
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					 return new Function();
				}
			},
			new Action() {	// [66] Decl = ID.a DOUBLECOLON Type.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Decl(a, b);
				}
			},
			new Action() {	// [67] lst$Decl = Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [68] lst$Decl = lst$Decl Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [69] Decls = lst$Decl.a
			new Action() {	// [70] Data = DATA ID.a LBRACK Decls.b RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 4];
					 return new Data(a, b);
				}
			}
		};

 good = true;
	}

	protected Symbol Call(String a, Exp[] b, Exp c) {
        return null;
    }

    protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
