package classes.parsers;

import src.classes.ast.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class LangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbbTm5LKSnh$TJKX4m8Y0AQ2GK0C44df2IIXIfIlIhGXeQ8gWWXGrAWfO49bXnWSVdF5" +
		"1noUm85QmW5XGLAo88bZ02bZW#Dlb9Dcz2VS6ddFlVEVxzot$S$OSoLkaNYfIUxLJAxLHHt" +
		"LIlhgectgeZ$gfM4bgaY32KxC44ScwN2CrI8CrH4CrHfUePOACIHgT8AAiIitBucUOdSRek" +
		"WHLVU#DDOYfzTRCErpJLQB#6g216gOKNHd4f#egNHtZkm9VNTsiUffOfREnUZIpbCobkbMt" +
		"QAxPeiLge6cQMILdgUu5ZofD2pIB$mNArCMwHZDKdtz3DTAvEayF9BnshHwl5rcQSiRTkpv" +
		"XHYdzAcF6F4BtckjIdH$gNYdr6eVgZIMcL8#PLqCnix0yfBNcENpPkb0JGhuHsCO5LwYqfI" +
		"b3apKdP1ckfg5hf6c#vd4$ONzEo3zShIDQsuYM6z4wHBIyYDOveXL4jAuHhNj4wndH2YDQx" +
		"uZMDwADYcZZ8zhKEDgrSNmtXBILkaahT8UMQndomf2SNI7VfXPe8xJIl5HX6w5LzETkrT4I" +
		"VFvQhw#xaE$K$VZEmUVRPylL8jskYtIFxiE#n6mo9xL6gvat3vhDUbZhjOxekgpqUbHem7f" +
		"FOourf8#Dc4DDc1aEdOyVqITXX4iLbrqnYNsl3j#yL9ueVaP6mfhEMTGKipD#ZE#jIKojjs" +
		"RUN7R23ko2UUo3dUb0GH3VajNfnFZwuKkdJgl05#rih1xDTCZimkhF9LEiz4ncGcQL73$2H" +
		"pehF9T$Kyve5$6jQix#dCzLNVReRkpOYQvTgyVhXKilphnxYQ#P6wntX#xvKdweUx7pA9iO" +
		"XpDLHYZ6p$6$k2tmPP7jXdmvWSs9p8XqOh8YKT5hf3FZCyWvdRzMgrxptt9vNntMQAMSLI5" +
		"dyi#YAtwlosqvd9vpGI7TpGfMSJudwMpMUZTyHVXyUzjW9s#DhoLZ3hQ1V0#oWddJ8fWJcN" +
		"Ya3Slb$vpf30t0Gj09JCBM53IMl4Aue#JsXRF1330IVVIfN7SQ#bHRPmMOROmvXdsczS#tp" +
		"FMSCeHKv1NMDexwUJPt3KE6bTSp83gFmslX9s5avnduQNWJl0NU2k#0jyDxuLtm8NWFl1J#" +
		"2kI10xRkOSj76OulFtMH6eFxdG8cs1ed6GgiVH3WlRXrK0POsoBWlzDygyy3JSWR0b9i3NH" +
		"D3jLlmp35olJ1iU$OwurUZ337#bO1whWh0U$7tKWiVVB8zx9j3dwlgvNfdrTImsSSQtDu9e" +
		"zhUWChVTuSC1UC1poFDmOi86UyzOy5my3aQ4sl7NDYVqZF2icjxBiO5SqfVtQtRSpzTRSys" +
		"FB4aC$EEQ#7rJk6V8j3yZBBPPPNMrvdUQFb9om$PVbPovijRxMypV9Eoxl3ztmseCRUQcpx" +
		"ehgJ11g6zB#8EHYJSoGa7mt9p4ttHANk9SNKxXII$RbLh#hzLCRK$BcyPg7yuZZFdn$AAGh" +
		"bz8$6QOFY$Cn$vaJ0$rPO$W5$LsZ7W$5OCFu2VW8$WeFW1t00V0##0$l1Fl0DuCjYlWHVcB" +
		"tcCtF8V6k#Df#RJyqdPe$vs7naTfiFyVuSrFsWuchlcyC1xxBwd#PTGy$CUzP#D1Z$iDxVJ" +
		"rcjzYiuOdvZt1hehvWTvXtpjddBl6cscstcPMolsTWtpEinx#5voo#Q5w2Xx0SkSDWrFE2o" +
		"KtWW6QHOzW8K1AUISdyI9qO7#7fgS9R8nURlPEqhuB3BUQU1m$xdMJZiX5u83ZkFQ#5KYyu" +
		"1F93C6Ta1Bd9AS4hkQj6b6lJW7elXOk8BuPxKA85Bq8lWFfp4Un7JFpWRkPoE7FRFP0tw7o" +
		"MxPxW=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN2,	// [0] Prog = Data.a Function.b; returns 'b' although more are marked
			new Action() {	// [1] Prog = CmdList.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final Node c = (Node) _symbol_c.value;
					  return new Prog();
				}
			},
			new Action() {	// [2] CmdList = Cmd.s SEMICOLON CmdList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Node l = (Node) _symbol_l.value;
					 return new CmdList();
				}
			},
			new Action() {	// [3] CmdList = Cmd.s SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [4] Cmd = LBRACE Cmd.c RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final Node c = (Node) _symbol_c.value;
					 return c;
				}
			},
			new Action() {	// [5] Cmd = IF LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new If();
				}
			},
			new Action() {	// [6] Cmd = IF LPAREN Exp.e RPAREN Cmd.c ELSE Cmd.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Node m = (Node) _symbol_m.value;
					 return new If();
				}
			},
			new Action() {	// [7] Cmd = ITERATE LPAREN Exp.e RPAREN Cmd.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Node c = (Node) _symbol_c.value;
					 return new Iterate();
				}
			},
			new Action() {	// [8] Cmd = READ Lvalue.l SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					 return new Read();
				}
			},
			new Action() {	// [9] Cmd = PRINT Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print();
				}
			},
			new Action() {	// [10] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [11] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [12] Cmd = RETURN lst$Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Exp[] e = _list_e == null ? new Exp[0] : (Exp[]) _list_e.toArray(new Exp[_list_e.size()]);
					 return new Return();
				}
			},
			new Action() {	// [13] Cmd = Lvalue.l EQUAL Exp.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Attr();
				}
			},
			new Action() {	// [14] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN6,	// [16] Cmd = ID.x LPAREN Exps.e RPAREN LESSER lst$Lvalue.v GREATER SEMICOLON; returns 'v' although more are marked
			new Action() {	// [17] Lvalue = ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new ID();
				}
			},
			new Action() {	// [18] Lvalue = Lvalue.v LBRACK Exp.e RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Exp e = (Exp) _symbol_e.value;
					 return new Call();
				}
			},
			new Action() {	// [19] Lvalue = Lvalue.v DOT ID.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					 return new Call();
				}
			},
			new Action() {	// [20] Exp = Exp.a AND Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new And();
				}
			},
			new Action() {	// [21] Exp = Exp.a OR Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Or();
				}
			},
			Action.RETURN,	// [22] Exp = Rexp
			new Action() {	// [23] Rexp = Exp.a GREATER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Greater();
				}
			},
			new Action() {	// [24] Rexp = Exp.a LESSER Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Lesser();
				}
			},
			new Action() {	// [25] Rexp = Exp.a GREATEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new GreaterEqual();
				}
			},
			new Action() {	// [26] Rexp = Exp.a LESSEREQUAL Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new LesserEqual();
				}
			},
			new Action() {	// [27] Rexp = Exp.a EQUALTO Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Equal();
				}
			},
			new Action() {	// [28] Rexp = Exp.a DIF Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Diff();
				}
			},
			Action.RETURN,	// [29] Rexp = Aexp
			new Action() {	// [30] Aexp = Exp.a ADD Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Add();
				}
			},
			new Action() {	// [31] Aexp = Exp.a SUB Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Sub();
				}
			},
			Action.RETURN,	// [32] Aexp = Mexp
			new Action() {	// [33] Mexp = Exp.a MULT Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Mul();
				}
			},
			new Action() {	// [34] Mexp = Exp.a DIV Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Div();
				}
			},
			new Action() {	// [35] Mexp = Exp.a RES Exp.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exp b = (Exp) _symbol_b.value;
					 return new Res();
				}
			},
			Action.RETURN,	// [36] Mexp = Sexp
			new Action() {	// [37] Sexp = Exp.a NOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return new Not();
				}
			},
			new Action() {	// [38] Sexp = Exp.a TRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Exp a = (Exp) _symbol_a.value;
					 return new Tra();
				}
			},
			Action.RETURN,	// [39] Sexp = BOOL
			Action.RETURN,	// [40] Sexp = NULL
			Action.RETURN,	// [41] Sexp = INT
			Action.RETURN,	// [42] Sexp = FLOAT
			Action.RETURN,	// [43] Sexp = CHAR
			Action.RETURN,	// [44] Sexp = Pexp
			Action.RETURN,	// [45] Pexp = Lvalue
			RETURN3,	// [46] Pexp = LPAREN Exp RPAREN; returns 'RPAREN' although none is marked
			RETURN5,	// [47] Pexp = NEW TYPE LBRACK Exp RBRACK; returns 'RBRACK' although none is marked
			new Action() {	// [48] lst$Exps = Exps
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [49] lst$Exps = lst$Exps Exps
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [50] Pexp = ID LPAREN lst$Exps RPAREN LBRACK lst$Exp RBRACK; returns 'RBRACK' although none is marked
			Action.RETURN,	// [51] Exps = lst$Exp
			Action.RETURN,	// [52] Type = TYPE
			Action.RETURN,	// [53] Type = Btype
			Action.RETURN,	// [54] Btype = INT
			Action.RETURN,	// [55] Btype = CHAR
			Action.RETURN,	// [56] Btype = FLOAT
			Action.RETURN,	// [57] Btype = BOOL
			Action.RETURN,	// [58] Btype = ID
			new Action() {	// [59] Parameter = ID.a DOUBLECOLON Type.b COMMA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Parameter();
				}
			},
			new Action() {	// [60] lst$Parameter = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [61] lst$Parameter = lst$Parameter Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] Parameters = lst$Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Parameters();
				}
			},
			Action.RETURN,	// [63] Ret = Type.a SEMICOLON COMMA
			new Action() {	// [64] lst$Ret = Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [65] lst$Ret = lst$Ret Ret
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [66] Rets = lst$Ret
			new Action() {	// [67] Function = ID.a LPAREN Parameters.b RPAREN DOUBLECOLON Rets.c LBRACE CmdList.d RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 6];
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					 return new Function();
				}
			},
			new Action() {	// [68] Decl = ID.a DOUBLECOLON Type.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 3];
					 return new Decl();
				}
			},
			new Action() {	// [69] lst$Decl = Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [70] lst$Decl = lst$Decl Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [71] Decls = lst$Decl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final beaver.Symbol[] a = _list_a == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_a.toArray(new beaver.Symbol[_list_a.size()]);
					 return new Decls();
				}
			},
			new Action() {	// [72] Data = DATA ID.a LBRACK Decls.b RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final String a = (String) _symbol_a.value;
					final Symbol b = _symbols[offset + 4];
					 return new Data();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
