%package "src.parsers";
%import "src.ast.*";
%import "src.beaver.*";

%class "MiniLangParser";

%terminals ID, INT, TYPE, FLOAT, CHAR, BOOL, NULL, NOT,   
           MULT, PLUS, SUB, DIV, RES, 
           EQ, IF, ELSE, ITERATE,
           RB, LB, AP, FP, SEMI, DOT,
           READ, PRINT, RETURN,
           GREATER, LESSER, GREATEREQUAL, LESSEREQUAL, EQUALTO, DIF;

%left FP;
%left MULT, DIV, RES;
%left PLUS, SUB;

%typeof INT = "Integer";
%typeof TYPE = "String";
%typeof FLOAT = "float";
%typeof BOOL = "boolean";
%typeof CHAR = "char";
%typeof Exp = "Node";
%typeof Pexp = "Node";
%typeof Sexp = "Node";
%typeof Mexp = "Node";
%typeof Aexp = "Node";
%typeof Rexp = "Node";
%typeof Exps = "Node";
%typeof ID = "String";
%typeof Lvalue = "String";
%typeof Stmt = "Node";
%typeof StmtList = "Node";
%typeof Prog = "Node";

%goal Prog;

Prog = StmtList                     
     ;

StmtList = Stmt SEMI StmtList     
         | Stmt SEMI              
         ;

Stmt = ID EQ Exp
     | IF AP Exp FP Stmt ELSE Stmt
     | IF AP Exp FP Stmt             
     | ITERATE AP Exp FP Stmt                        
     | Exp
     | READ Lvalue               
     | PRINT Exp                   
     | RETURN Exp+ 
     | Lvalue EQ Exp           
     | ID AP Exps FP LESSER Lvalue+ GREATER                          
     ;

Lvalue = ID 
     | Lvalue LB Exp RB  
     | Lvalue DOT ID   
     ;

Exp = Rexp
;

Rexp = Exp GREATER Exp
     | Exp LESSER Exp          
     | Exp GREATEREQUAL Exp    
     | Exp LESSEREQUAL Exp     
     | Exp EQUALTO Exp         
     | Exp DIF Exp  
     | Aexp
;

Aexp = Exp PLUS  Exp           
     | Exp SUB  Exp
     | Mexp  
;
      
Mexp = Exp MULT  Exp           
     | Exp DIV  Exp
     | Exp RES  Exp  
     | Sexp                          
;

Sexp = Exp NOT
     | BOOL                        
     | NULL                     
     | INT                       
     | FLOAT                          
     | CHAR
     | Pexp                                                     
;

Pexp = AP Exp FP                        
     | TYPE LB Exp RB
     | ID             
;

Exps = Exp+
;