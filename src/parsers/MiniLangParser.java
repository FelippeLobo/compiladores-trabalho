package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pbLsTmLKKK$lPU8Kf2eaH2n4Vo884aa1ZI2SIIe828iO0GHICs50XOOe9Og1aTHSNAECv" +
		"OVpYMqL#E$XA1A1P45CLkH2oOsAAYOC7rk$islkKstaH$mF1cllkTFUVisRDdT#$U1zZF8W" +
		"y568I1E0f7OmYoCHGv68vHA99Voh$H3sCm3gKeGpagK8bJbV#LyY#FvKISXuin5qrOuB7zQ" +
		"v5$1Dim1yUW6ADHWYequonCDMp1MVuQRCEHHiIn8Nx1qIMEGwgo7u86L#QJGYB6PxmBiqBy" +
		"CemCBmt9uwSGsuyXjkzxC#lzsk9Q1RadaLL8F9wddMciK3pU19mi$pJQ#ueoE33Axu4dmER" +
		"Eiz0NXxhrSWtw#EcHWYHVVNySflJd6lg88TSZ3RKu73VW7AnmPUu#bJDmlClZ20p08e$V1S" +
		"YAQ#HlyaMFnqKUpNMUs0TxsrmnjwqMDQZZYhdrUrVril#SmnL6F4EMtSx#nUKOZocuMibN8" +
		"Mhu3ZFaN4CUOSZvXZpIa0iDkTgGZpNaYOOyqv3FD#JPXZpVa5iC#GHCaJjnjjoE9N8RJi92" +
		"deF9iWkdO35EGojEnncu46UY4TCn3PV8N#JFxD4XEv2idkcOHwzq#OFy2jV8Bx0KrmAuNdw" +
		"EvLY6s6yPJs0$9FE4zkUfJkDPSqvDEc#eWRm30C6JRlEESSvr4azgaVBFyR6CvNiia##nmN" +
		"oJkMrnYxTVt9R7gXUmsgDOvI9LXxWjBCjWcnan4k8NR05tY53s34$ckI7zufb7GqTEDCEmM" +
		"VRMTc1QtAk0X5OXyNZkjhb2yNX3U8iWPCVtBehx10Zr9YZrwCS5wAi3z54VlIcNyRkZWlbM" +
		"yGqRbddiLBezCZXknCVFr4JtwU4V#s1lcnLosoguVo89hDZ$cOCfPwZzMybp9NYdnkGWt$r" +
		"PjfX$1f$PF0SHLYo7vy3Hf52Ai1B3#RqnWbQBkgXwEdU1CzzizHp6FZQVZhwSEe5i$Z#Bgh" +
		"v3fVhnV05jIsDtRW6nYbXCfF92d4NcpIWU85UHrmBs4l8cOakiZzWEM1QHpCOTv7HY0kN9v" +
		"7ho3l9qyavo8$q5UJQPyQq5PCQtMidvP8uhAiWtqZ#DV3lvPlBgs5ZMWveVer#T8oSAzdc6" +
		"ZmOjhoEUez1as9E8TiwFtnOsQsBpEqGm7siDZOjYFlOjcblrt1#Xt4mq4RSHBLJUGrwe$KX" +
		"YXfQNCzO68fEw1c8kTNUp$IwDzxBDkjhpoJUHLn2hQTj6snFKFSfs6#KNoFSJJgxTR6yaxs" +
		"Px5HTo5zaPXsjWiyQsS$zyI6QjxOS9rj5UoLXFac$LESqZ7YVk95Xh#ocjlqlFxw5uVOIsY" +
		"USrjnksf$rhBZfZZ8cQxzFwEPfr7cAhNeE#UdpTt#vffsWUe3bJSvRcNB$nmy0#8rtjqQxS" +
		"D$V8h6qNxJErNsM2yHlrdBDSSJlZikNKliRLhqxxxT4#gOPjajQjDtGjckkrhSk8tstuJJF" +
		"aPiDda6lygVxpGHjyVdAzUkxsw3yYkFla1yJxn7l4LeAxNMuXtYOs4syIc#H6#R5yHxubtv" +
		"2lozVag$8LkK6#hEAyfEErnqRIhM$LyrFY4w93VhVNs9t4rtA7pcsjNEUNUU8$#OqXVwQYr" +
		"l8xn$a2iWYRw95ZNCeRgbgX3#yuct0uIRCWB0Cs$vy8mb8#9VmUBE7jLanzCNMLv4hQoydb" +
		"v39o6RcAN4GkuZZEEpwFSZuv689lTrj3y7wn3GZUDXOXV558dqAEuzppOnGitl02DVy0SRi" +
		"k7G==");

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = Stmt.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = Stmt.l SEMI Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			RETURN4,	// [7] Data = ID AC Decl FC; returns 'FC' although none is marked
			RETURN4,	// [8] Decl = ID DBCOLON TYPE SEMI; returns 'SEMI' although none is marked
			RETURN5,	// [9] Decl = ID DBCOLON TYPE SEMI Decl; returns 'Decl' although none is marked
			new Action() {	// [10] Stmt = ID.l EQ Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			new Action() {	// [11] Stmt = IF AP Exp.l FP StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			new Action() {	// [12] Stmt = IF AP Exp.l FP StmtList.r ELSE StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [13] Stmt = ITERATE AP Exp.l FP Stmt.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					 return new Iterate(l, r);
				}
			},
			Action.RETURN,	// [14] Stmt = Exp
			RETURN2,	// [15] Stmt = READ Lvalue; returns 'Lvalue' although none is marked
			new Action() {	// [16] Stmt = PRINT Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [17] Stmt = RETURN Ret.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Node l = (Node) _symbol_l.value;
					 return new GenRet(l);
				}
			},
			RETURN3,	// [18] Stmt = Lvalue EQ Exp; returns 'Exp' although none is marked
			new Action() {	// [19] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [20] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [21] Stmt = ID AP Exps FP LESSER lst$Lvalue GREATER; returns 'GREATER' although none is marked
			new Action() {	// [22] Func = ID.a AP ParamList.b FP COLON Return.c AC StmtList.d FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					return new Func(new Var(a), b, c, d);
				}
			},
			new Action() {	// [23] Func = ID.a AP FP AC StmtList.d FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final Node d = (Node) _symbol_d.value;
					return new Func(new Var(a), d);
				}
			},
			new Action() {	// [24] StmtList = Stmt.l SEMI StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Node r = (Node) _symbol_r.value;
					 return new StmtList(l, r);
				}
			},
			new Action() {	// [25] StmtList = Stmt.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(l);
				}
			},
			RETURN3,	// [26] Ret = Exp COMMA Ret; returns 'Ret' although none is marked
			Action.RETURN,	// [27] Ret = Exp
			RETURN3,	// [28] Return = TYPE COMMA Return; returns 'Return' although none is marked
			Action.RETURN,	// [29] Return = TYPE
			RETURN3,	// [30] ParamList = Param COMMA ParamList; returns 'ParamList' although none is marked
			Action.RETURN,	// [31] ParamList = Param
			RETURN3,	// [32] Param = ID DBCOLON TYPE; returns 'TYPE' although none is marked
			Action.RETURN,	// [33] Lvalue = ID.l
			RETURN4,	// [34] Lvalue = Lvalue LB Exp RB; returns 'RB' although none is marked
			RETURN3,	// [35] Lvalue = Lvalue DOT ID; returns 'ID' although none is marked
			Action.RETURN,	// [36] Exp = Rexp
			new Action() {	// [37] Rexp = Exp.l GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r);
				}
			},
			new Action() {	// [38] Rexp = Exp.l LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r);
				}
			},
			new Action() {	// [39] Rexp = Exp.l GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r);
				}
			},
			new Action() {	// [40] Rexp = Exp.l LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r);
				}
			},
			new Action() {	// [41] Rexp = Exp.l EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r);
				}
			},
			new Action() {	// [42] Rexp = Exp.l DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r);
				}
			},
			new Action() {	// [43] Rexp = Exp.l AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r);
				}
			},
			Action.RETURN,	// [44] Rexp = Aexp
			new Action() {	// [45] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r);
				}
			},
			new Action() {	// [46] Aexp = Exp.l SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r);
				}
			},
			Action.RETURN,	// [47] Aexp = Mexp
			new Action() {	// [48] Mexp = Exp.l MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r);
				}
			},
			new Action() {	// [49] Mexp = Exp.l DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r);
				}
			},
			new Action() {	// [50] Mexp = Exp.l MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r);
				}
			},
			Action.RETURN,	// [51] Mexp = Sexp
			RETURN2,	// [52] Sexp = Exp NOT; returns 'NOT' although none is marked
			new Action() {	// [53] Sexp = BOOL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final boolean n = (boolean) _symbol_n.value;
					return new LiteralValue<Boolean>(n);
				}
			},
			Action.RETURN,	// [54] Sexp = NULL
			new Action() {	// [55] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new LiteralValue<Integer>(n);
				}
			},
			new Action() {	// [56] Sexp = FLOAT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final float n = (float) _symbol_n.value;
					return new LiteralValue<Float>(n);
				}
			},
			new Action() {	// [57] Sexp = CHAR.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Character n = (Character) _symbol_n.value;
					return new LiteralValue<Character>(n);
				}
			},
			Action.RETURN,	// [58] Sexp = Pexp
			RETURN3,	// [59] Pexp = AP Exp FP; returns 'FP' although none is marked
			RETURN4,	// [60] Pexp = TYPE LB Exp RB; returns 'RB' although none is marked
			new Action() {	// [61] Pexp = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Var(l);
				}
			},
			new Action() {	// [62] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [63] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.RETURN	// [64] Exps = lst$Exp
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
