package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pbLsbiLLKG$kwzG4NQAXOhj7tTe0NQ2gKR59IALd0311711HS45134fIXR#6kCYNyaA8c" +
		"9#WSI8VZ7G8oXBbKKgL8NN41K5CGYk04YoFZT#mxlpLrgNwE$w7tvpioPEJDdpjnppvm7E4" +
		"ro1kUZ3lMen0XKeHerSZeeGQC89k0st8FxC1yBKOB168eUIOdy5RAP7l3wjx5AUccKRxLNE" +
		"ON7v638ppnKu58Cmt3KOWaSz4Gld2SdGz5SWein0Bc8eG1568XoD2AJ$ZEHZb4TZkb0BYTm" +
		"7IuBhW4Pk03NOZmk3yWxZKNUm8NeYulaE6Q5l0Rxet45niaVokjTZEQg56RPZsim4PFmAEQ" +
		"4l0RpcERc4PDJo6FGqlOi7y6DM8n#IPqqTpNBtKuUp6HlBvEtAcaZfd7FJiNZk04FuNeqO2" +
		"b$CmAMD#5A#H6tOpRtnPIGxdw#coRv7ijmSsYddclzbLqShtCTr3N8TrWUolMTWVxT8Jk$V" +
		"kv$NjCYvK$pAnWTy02IpuF8Llh#YizHV9xYynLVgFXYnGzIVAdYXoY#JF4Z5Jz6yLShVgRY" +
		"xr3ylOfVeFY75JysiTvRaD8Z#ppqyTeij#SzMOJ5qyjXvNAhI1g$lR0abx8OlzniVh$z#Vt" +
		"sPaNgmoyuAGdRXBt6hP8skNmZCP#FOhwNe5qfpuqXF3dAU5QSNNybnmQZIMSbocGjyceArz" +
		"MF$YtwjrZfSZeSqv7SZMDWA9Oyxe#C27ddiUHmV04ZoIFNMQRSlAJxibl2CHKfp9BFSJdSg" +
		"yKHiqJdiIe5hz6M3cShzkb6TpdBtKqUdKajpULxZt6NZE2lY6DgU0xMyJG9MjPpZCsVnTCn" +
		"gAlWkwdoza9rftkjk$LrheAw6durXH6v3lOx#xB#pnWrxw2G$pbg9V5ujIXwxBd4sudrsfB" +
		"IWrmYXdoNurSKCz8YLerLg#DrRu9R#oWyO#fWZLUVmFeCdk$WFm0uaytDOfcnMKgyGgmX5X" +
		"FhMFIE437YE36Ke3#h5h1xaOuZpIITI9fDEfCqdtGEQIdj#v8E8wqWhOlFOOyrTBnBkmBQJ" +
		"68pmyIwYVtffFELVXQRpSGseeruaki$GVbSyat6xe3V9qzue9LeOTnkXHRYAVARudfh0vjo" +
		"qcRcQnfzBMB$MVQN42k9hoXRGTdpn1PY8z5iRFTGjvRCBgBTo9uWlYOpbRhrv9yXtMnYEKr" +
		"#YndtCddEQRt0pdRIWuGRvo3ImzGj9EOHRMRjhneVxMfjPOQs6fzFArrzT8uJ##UayRlLq6" +
		"s6jXYwmz1TXkusTA#X#mqzPEXHGuz5pVjleCqfVz#n$7rhdU9VPBFUZ4jBpJzs6jkD0R#lg" +
		"HYcq5z688uievjjw0Ab6s1aovM$ruskmEXUKlutADiIPRDLySzr4FygH3pojjV#wPCT8xXZ" +
		"vKlY2#9pOZVn6V49yJ71tIeV4H$AJjaZdqgRjCe7iaFUb$Takxph#Nd7#6k9ps9wxLxBtIr" +
		"xvIVP9uTzSn$onVMclENJ$fxWVfDVsVv272MEo0zi3tYQdqDh$CRpri2RcSMxXaqun5a#JY" +
		"jPUKPvwCdQvH0kJJFK8cm5XpSFYx2zCSDvPbPJLir#BMajTLNUxSFY$SKXBDvU79vmxlsrX" +
		"tSpAIK$c3GQ5azzny3Y#UyeMAm6Dc55mgsFvPp3hUiZFTWyrIsC#GU#s4Zp");

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = Stmt.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = Stmt.l SEMI Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			RETURN4,	// [7] Data = ID AC Decl FC; returns 'FC' although none is marked
			RETURN4,	// [8] Decl = ID DBCOLON TYPE SEMI; returns 'SEMI' although none is marked
			RETURN5,	// [9] Decl = ID DBCOLON TYPE SEMI Decl; returns 'Decl' although none is marked
			new Action() {	// [10] Stmt = ID.l EQ Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			RETURN5,	// [11] Stmt = IF AP Exp FP Stmt; returns 'Stmt' although none is marked
			RETURN7,	// [12] Stmt = IF AP Exp FP Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [13] Stmt = ITERATE AP Exp FP Stmt; returns 'Stmt' although none is marked
			Action.RETURN,	// [14] Stmt = Exp
			RETURN2,	// [15] Stmt = READ Lvalue; returns 'Lvalue' although none is marked
			new Action() {	// [16] Stmt = PRINT Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			RETURN2,	// [17] Stmt = RETURN Ret; returns 'Ret' although none is marked
			RETURN3,	// [18] Stmt = Lvalue EQ Exp; returns 'Exp' although none is marked
			new Action() {	// [19] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [20] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [21] Stmt = ID AP Exps FP LESSER lst$Lvalue GREATER; returns 'GREATER' although none is marked
			RETURN8,	// [22] Func = ID.a AP ParamList.b FP COLON Return AC StmtList.c FC; returns 'c' although more are marked
			RETURN3,	// [23] StmtList = Stmt SEMI StmtList; returns 'StmtList' although none is marked
			RETURN2,	// [24] StmtList = Stmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [25] Ret = Exp COMMA Ret; returns 'Ret' although none is marked
			Action.RETURN,	// [26] Ret = Exp
			RETURN3,	// [27] Return = TYPE COMMA Return; returns 'Return' although none is marked
			Action.RETURN,	// [28] Return = TYPE
			RETURN3,	// [29] ParamList = Param COMMA ParamList; returns 'ParamList' although none is marked
			Action.RETURN,	// [30] ParamList = Param
			RETURN3,	// [31] Param = ID DBCOLON TYPE; returns 'TYPE' although none is marked
			Action.RETURN,	// [32] Lvalue = ID.l
			RETURN4,	// [33] Lvalue = Lvalue LB Exp RB; returns 'RB' although none is marked
			RETURN3,	// [34] Lvalue = Lvalue DOT ID; returns 'ID' although none is marked
			Action.RETURN,	// [35] Exp = Rexp
			new Action() {	// [36] Rexp = Exp.l GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r);
				}
			},
			new Action() {	// [37] Rexp = Exp.l LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r);
				}
			},
			new Action() {	// [38] Rexp = Exp.l GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r);
				}
			},
			new Action() {	// [39] Rexp = Exp.l LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r);
				}
			},
			new Action() {	// [40] Rexp = Exp.l EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r);
				}
			},
			new Action() {	// [41] Rexp = Exp.l DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r);
				}
			},
			Action.RETURN,	// [42] Rexp = Aexp
			new Action() {	// [43] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r);
				}
			},
			new Action() {	// [44] Aexp = Exp.l SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r);
				}
			},
			Action.RETURN,	// [45] Aexp = Mexp
			new Action() {	// [46] Mexp = Exp.l MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r);
				}
			},
			new Action() {	// [47] Mexp = Exp.l DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r);
				}
			},
			new Action() {	// [48] Mexp = Exp.l RES Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Res(l, r);
				}
			},
			Action.RETURN,	// [49] Mexp = Sexp
			RETURN2,	// [50] Sexp = Exp NOT; returns 'NOT' although none is marked
			new Action() {	// [51] Sexp = BOOL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final boolean n = (boolean) _symbol_n.value;
					return new LiteralValue<Boolean>(n);
				}
			},
			Action.RETURN,	// [52] Sexp = NULL
			new Action() {	// [53] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new LiteralValue<Integer>(n);
				}
			},
			new Action() {	// [54] Sexp = FLOAT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final float n = (float) _symbol_n.value;
					return new LiteralValue<Float>(n);
				}
			},
			new Action() {	// [55] Sexp = CHAR.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final char n = (char) _symbol_n.value;
					return new LiteralValue<Character>(n);
				}
			},
			Action.RETURN,	// [56] Sexp = Pexp
			RETURN3,	// [57] Pexp = AP Exp FP; returns 'FP' although none is marked
			RETURN4,	// [58] Pexp = TYPE LB Exp RB; returns 'RB' although none is marked
			new Action() {	// [59] Pexp = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Var(l);
				}
			},
			new Action() {	// [60] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [61] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.RETURN	// [62] Exps = lst$Exp
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
