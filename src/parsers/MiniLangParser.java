package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Exemplo.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDajbBmq0GnhzajKbQczw7rhj540H141KyNhoAYYygwAD$YN#mMk#hsl5BCWc5zg6x$6R" +
		"ccvtiRDW5S8i9#CYhBQ8i4bXC8OC636nwL#vLDJ6hqJXIgAEcQb6wgYDR7S567GTZHxvqbo" +
		"my#MM7DAOn1eypXm9Ag60ICrZ0d7nZNZxb9poDepR3tH3QFAkBh2#7lfQeIX9P$3#JA5Vrw" +
		"3RgE1ZdUDvuRuznq26h$r18fi#ELMRJd2xFtBf3E9eaqETaINDRP9cSa1LoAY8z#bLTNrE$" +
		"hdwJR91TiXFaDB$FxxeQ7v0pqY0Nv9BSa3Qv8jT1NLoltpXnpBneRgzlVJlUM$sX#YFrnt6" +
		"jwdQ$rfmTrwls##8MTCYVzAIZyOUyqxwHL$92dicJTEGnN7$0i57Ycx1uxuROL8Ol0yHYd2" +
		"8MRyVcpHbYyRxC42p5eFuFgS9T4m==");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Prog = StmtList
			RETURN3,	// [1] StmtList = Stmt SEMI StmtList; returns 'StmtList' although none is marked
			RETURN2,	// [2] StmtList = Stmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [3] Stmt = ID EQ Exp; returns 'Exp' although none is marked
			Action.NONE,  	// [4] opt$StmtList = 
			Action.RETURN,	// [5] opt$StmtList = StmtList
			RETURN6,	// [6] Stmt = Exp IF LB opt$StmtList Els RB; returns 'RB' although none is marked
			Action.RETURN,	// [7] Stmt = Exp
			RETURN2,	// [8] Els = COLON StmtList; returns 'StmtList' although none is marked
			RETURN3,	// [9] Exp = Exp GREATER Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [10] Exp = Expr
			RETURN3,	// [11] Expr = Expr MULT Expr; returns 'Expr' although none is marked
			RETURN3,	// [12] Expr = Expr DIV Expr; returns 'Expr' although none is marked
			RETURN3,	// [13] Expr = Expr RES Expr; returns 'Expr' although none is marked
			RETURN3,	// [14] Expr = Expr PLUS Expr; returns 'Expr' although none is marked
			RETURN3,	// [15] Expr = Expr SUB Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [16] Expr = ID
			Action.RETURN,	// [17] Expr = NUM
			RETURN3	// [18] Expr = AP Expr FP; returns 'FP' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
