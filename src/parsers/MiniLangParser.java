package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbtbi5LKKni$CjDHITkWhOf5ziwL0Mres4LdT4K4G4G5n1nSMDn05KH0HKU0VOmA9Qo8" +
		"cnfYeYQ92tN33XKL0K5H0mIg2YhXm$SsysyVflBuEgCG4dPTlldFEFVUSkyszzucaZJO7vJ" +
		"Z9bqxILjf9U#aW9vdVmXOvGPfACsDak9mg0#GiEK#6nMrOkYKijINBMkjAVMaesP8ZnqiBy" +
		"vcC2iNh8IVBbJ94MaehQIrj94yka7JpXwGHhqPKlA1sGShILAtutHoGmd1EwImPSeRqgZRN" +
		"QKdZ4TPzhv7IHqfeVscY$Ttb5FG#aUEpHURBuAIOrrIHusx6lpSn1oPYdYrJpIvot2WpPBR" +
		"SbJB7DobxE5GkbbkYUcY#bZ5akKV6adrS8liDCXrzVEICNIwNoSoac9#dz1yk4o97RNlAaY" +
		"zJbdnnfAlccBM7LfVPdVHb58ihasKAizuziReyyvBqLtuBvIRfQxP9Lnaj2ynEiz5ib4nP8" +
		"4MXrNI7gZEtKeHBp0eP8LU7F6egRQBSPdRW4OvvhEjwbFh8dTANhwzhPAtAitXwI3ypml$S" +
		"lztgnKTn5EurMnc5#sLIH2#cXVHR8$ndHRRY2kMlPFEfF22NoYBUyUSggQKywoYvdf8RABc" +
		"HacDARgpa9ahELVA9Icwkv8vAxgBadahkf#H1IZv7oUUdyBzGoTSf#MObtwxaEKgUf#IBp5" +
		"Tcirml5Oz$medS9zKyyHqcU5#Bwh17UTmQqharP72#95koc97Qs6FCQ6DslYRiXd5RZA#fm" +
		"fB9ZXEtrc6VhCTEsO2ziX6xPJXUBdjfSxKoyeZRaVYTY9ST6S#ldPEoD9LTYDmgAMSkELjW" +
		"hpvNkFrLzUT4h3cqFpFH$dnYnh16zQSPOt6uEVAnnoYfYEao$eUJ8pjbIJwvexDdizeSB8L" +
		"aQvR8LfEnY$6BojucE36JOwRoFvnLaBhsNodvhzd3Sn5B#Z9SlWp$AtFKDz#DMupswu9N0Q" +
		"FQ6QaKZg$HqgJebMDhhOWS1Tpug$DmYLmIkKAFDLsFWJy71PHsFg9Q$Yo6zIZ$VxlNrRMla" +
		"9sd08$aKJZQlTR#MixX72x6iwK97kHKdl$BoR8Rd0gkiO#$U$1kRgfvx0uJVuiicHc$q7G9" +
		"JlVuCm0KWKmmLSIj2OPofUaAZuAvyRZZuMdm17WEF0LU14#7byApuIVX#SJ8W1V3zU67uld" +
		"SHomlz$b8G9rdUVMtxQOTxelmK5LUnciXM0QU1ey2#kgkXyVOUXign$HlV6u7slmSM8N#2V" +
		"fMc3u6j#gnu47hkuMod#6dG5dSvhpFQnjW7BmQw9lWEY26ZV7noE$i44dhYTmMsowm1rj3#" +
		"5VOHnPb1R3lMzlcoiLMWjuUmF8EN4wStjY1q4Pl8BRzj8cyRbraRcfkBT2Kif7uxCRcmWTX" +
		"VoxhWS6KJKB7nob6f$$E8FX3OZCEtYpqOTHv0NaUyZZaXod$2BqK7zhZZG1pmGomDDvURwO" +
		"TZwss$JbgZ8UeEMfj$MTPdcjvWUN5bksOUyiiFsPvkULdB3zlUOMUryC1TSf2#khAkljuXS" +
		"pdmrXAHPlNHCHT5z8tstWhBQzMPTkiRUCXcworPJjj6Ml5AxUsVOVydBsgpdRhMylwJQoYN" +
		"PDLtveg#m7B7LIyvSJVhdoCvLwM#nygIqktjc4g$XEsB4lvrLVnMgb#b8VRQjkmH4AFUHdm" +
		"nPXrO2tu6B0o3QlNV03u6irxWA$5l0rMcpVDUhF6l6lUCc#OryrhfioiCYk3MA$QcA$uKHC" +
		"PlWlUx09cWoddVzxtI7lDlagj#2KXxJVi1#Ody2Fu8R3jqV5KhM$3FVbd7hCfYDMF#wLZuT" +
		"y$FU1oFdiW7MHOTeBxQSVWzka0r#eU$uOSu0Q#tRZt5c7pRv0bS0brIx37sG6kXHVO$PEy6" +
		"7jXy3$7uLJnWCDzrWl#T#Lp8yX7RelS3guQ3kURP#5mqdaA3kUU2vmgaOTF7Zdox1sdnv#x" +
		"zsiF");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN12 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 12];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Prog = StmtList
			Action.RETURN,	// [1] Prog = Func
			RETURN2,	// [2] Prog = Func StmtList; returns 'StmtList' although none is marked
			RETURN3,	// [3] StmtList = Stmt SEMI StmtList; returns 'StmtList' although none is marked
			RETURN2,	// [4] StmtList = Stmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [5] Stmt = ID EQ Exp; returns 'Exp' although none is marked
			RETURN5,	// [6] Stmt = IF AP Exp FP Stmt; returns 'Stmt' although none is marked
			RETURN7,	// [7] Stmt = IF AP Exp FP Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [8] Stmt = ITERATE AP Exp FP Stmt; returns 'Stmt' although none is marked
			Action.RETURN,	// [9] Stmt = Exp
			RETURN2,	// [10] Stmt = READ Lvalue; returns 'Lvalue' although none is marked
			RETURN2,	// [11] Stmt = PRINT Exp; returns 'Exp' although none is marked
			new Action() {	// [12] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [13] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN2,	// [14] Stmt = RETURN lst$Exp; returns 'lst$Exp' although none is marked
			RETURN3,	// [15] Stmt = Lvalue EQ Exp; returns 'Exp' although none is marked
			new Action() {	// [16] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [17] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [18] Stmt = ID AP Exps FP LESSER lst$Lvalue GREATER; returns 'GREATER' although none is marked
			RETURN12,	// [19] Func = ID AP ParamList FP COLON Return AC FuncStmtList RETURN Ret SEMI FC; returns 'FC' although none is marked
			RETURN3,	// [20] FuncStmtList = FuncStmt SEMI FuncStmtList; returns 'FuncStmtList' although none is marked
			RETURN2,	// [21] FuncStmtList = FuncStmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [22] FuncStmt = ID EQ Exp; returns 'Exp' although none is marked
			RETURN5,	// [23] FuncStmt = IF AP Exp FP Stmt; returns 'Stmt' although none is marked
			RETURN7,	// [24] FuncStmt = IF AP Exp FP Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [25] FuncStmt = ITERATE AP Exp FP Stmt; returns 'Stmt' although none is marked
			Action.RETURN,	// [26] FuncStmt = Exp
			RETURN2,	// [27] FuncStmt = READ Lvalue; returns 'Lvalue' although none is marked
			RETURN2,	// [28] FuncStmt = PRINT Exp; returns 'Exp' although none is marked
			RETURN3,	// [29] FuncStmt = Lvalue EQ Exp; returns 'Exp' although none is marked
			RETURN7,	// [30] FuncStmt = ID AP Exps FP LESSER lst$Lvalue GREATER; returns 'GREATER' although none is marked
			RETURN3,	// [31] Ret = Exp COMMA Ret; returns 'Ret' although none is marked
			Action.RETURN,	// [32] Ret = Exp
			RETURN3,	// [33] Return = TYPE COMMA Return; returns 'Return' although none is marked
			Action.RETURN,	// [34] Return = TYPE
			RETURN3,	// [35] ParamList = Param COMMA ParamList; returns 'ParamList' although none is marked
			Action.RETURN,	// [36] ParamList = Param
			RETURN3,	// [37] Param = ID DBCOLON TYPE; returns 'TYPE' although none is marked
			Action.RETURN,	// [38] Lvalue = ID
			RETURN4,	// [39] Lvalue = Lvalue LB Exp RB; returns 'RB' although none is marked
			RETURN3,	// [40] Lvalue = Lvalue DOT ID; returns 'ID' although none is marked
			Action.RETURN,	// [41] Exp = Rexp
			RETURN3,	// [42] Rexp = Exp GREATER Exp; returns 'Exp' although none is marked
			RETURN3,	// [43] Rexp = Exp LESSER Exp; returns 'Exp' although none is marked
			RETURN3,	// [44] Rexp = Exp GREATEREQUAL Exp; returns 'Exp' although none is marked
			RETURN3,	// [45] Rexp = Exp LESSEREQUAL Exp; returns 'Exp' although none is marked
			RETURN3,	// [46] Rexp = Exp EQUALTO Exp; returns 'Exp' although none is marked
			RETURN3,	// [47] Rexp = Exp DIF Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [48] Rexp = Aexp
			RETURN3,	// [49] Aexp = Exp PLUS Exp; returns 'Exp' although none is marked
			RETURN3,	// [50] Aexp = Exp SUB Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [51] Aexp = Mexp
			RETURN3,	// [52] Mexp = Exp MULT Exp; returns 'Exp' although none is marked
			RETURN3,	// [53] Mexp = Exp DIV Exp; returns 'Exp' although none is marked
			RETURN3,	// [54] Mexp = Exp RES Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [55] Mexp = Sexp
			RETURN2,	// [56] Sexp = Exp NOT; returns 'NOT' although none is marked
			Action.RETURN,	// [57] Sexp = BOOL
			Action.RETURN,	// [58] Sexp = NULL
			Action.RETURN,	// [59] Sexp = INT
			Action.RETURN,	// [60] Sexp = FLOAT
			Action.RETURN,	// [61] Sexp = CHAR
			Action.RETURN,	// [62] Sexp = Pexp
			RETURN3,	// [63] Pexp = AP Exp FP; returns 'FP' although none is marked
			RETURN4,	// [64] Pexp = TYPE LB Exp RB; returns 'RB' although none is marked
			Action.RETURN,	// [65] Pexp = ID
			Action.RETURN	// [66] Exps = lst$Exp
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
