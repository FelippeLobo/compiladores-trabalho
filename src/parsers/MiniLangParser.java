package src.parsers;


import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTLrbiLLKKNVTUeAMs32q5fBKZPR2bSrydeQLKSKQKIQcA8ZWXMWS4bMYYFqP3WFXZeed" +
		"J1$we7oOc9YRKWTa99voeGq750LG4HNIxxkbftlRUTtbjY56voJfhdNtssUUSVNltUGMynV" +
		"8dhaGbQd0gIb66AIYNeq4Bsf6FGXJZB5o0ULY0Isn$HjmYHqApvc829c8I9gC2bsCeF0p2O" +
		"AI8XEACn71a8HjZS39oS0fAP4yesZHCDxWKzO6HUBJmYgw$8j839zoOm7E8yKo#ir#YHZ1C" +
		"nQoEz8go#sUBoH$oEnO5zulMo5dn$F#6SqFpqfBFGpCk2iqBPoVLPAUs7$dvCN9aV#J8zw4" +
		"TDFLZvmFDyBzbFrDbSuJIo$XTDM8gLk2CKCPF2lsL1ptE2rbcILV8rXcASwBrTNQ3Oureat" +
		"tCRh8OVy$QdEFUqrs1VeUAhxHyAPzZ9HRYLfoD5V8pRiTbo5I#evGUhVHOfSSfdQjqdj85I" +
		"XSfFLxfAgNhb6vHUgRIvoXzeT8NAts5qjVB0PoE1Zc8fV8JPfjwruxvyeFinLASXgkm1DVW" +
		"QfoFQt4TRf13M2xTqet5fit0BRWH6N8ODr7TZDka1wjmfto1Em03XxM#zuOPmagLci3Yy7j" +
		"8uvSrcj$cM7wTusm$Grd2i$fE47#R5NoxLVGCnabdf67y#aUm1cIo1enY5GX6osL5y54K6e" +
		"b7YrenEACfqhC$EuiQqJ5p8hsYxFxPYk4$XQ7z5aVEqldF2SsBtcjyNdg2UL7PoJsk$1nh9" +
		"BY3wFmbty5$pQwpgNKrJrtB$CPO1SCPJ$vEmfQSViGvqVhwnC6nMbgocTs1nF2pza$kKUiy" +
		"lh5gtXb5z8znfqNg$WZw$j#ro$ELcTP$9wwfTmujsSRIY0R#2lHutvQmty2yvFEEzNtoJ5l" +
		"8iHgs#UnxR6l83bKE2lXVKG6ht#fxJF7axGf6wtqs4qE9BSHueeVuaEZizVNgs2mWxkNbjP" +
		"#OGHmcvX12B0BS5F8oyd3oIl8OydtaVCvB8qyaPv8hUcEwzPPRV1u8E6SccxNs74VOdqL#K" +
		"etFvzgL50V9Bv574WsqBo4$QtsMMrveupJHTpknbdY4zYwYa$Pjn5RcmBzpzj3s73NpvgvY" +
		"Vozz7VPBo5dagGHpxDxFli$hs2#bNupwOUeowWtKZtDy2llLn7HYWiqpS#GnjrujmVrwz76" +
		"V9lCitcHYDk7liutSRFV$6FKyOXhrK#GEefre9UpPl3PxnbRBAPRdMkw9vyvvDAvnjxMjis" +
		"izONc3vMSiFs$vHSiRBM#olCFoJikx#jReBpXdTw3V4#WtnRN7lpVd8MlVboJkWK3$a3spF" +
		"PlpWXexQhb3hPLbsRLZ3oh$zSelLUdqn7lnCksQ3oXRaRLr1NmdgNNM98w7rKZmo5VojRng" +
		"zSV4HmI$Tjb5V42yJxnBl4EyJRn5l2clooVodkoKDsI7R9TjibMso6OJOvEDzLfVLDFxrhI" +
		"xYK#9RlcExSloIg8T7VlfZIg$Hev$4x9yPkQqy9js#8lCXnlYAjux3GQ3UPDvXCyfbXt2LV" +
		"1OA$tgwngVIbRBSjhAsQyZrt6inbHUX$UKPtwnnCXbfd8F8ZpMU8TLtek0m$hlMJYy2Jm5X" +
		"$U2IpW9KKgVKgxXt#hr1gwvpvl$0l4PuOW=");

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = StmtList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = StmtList.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			RETURN4,	// [7] Data = ID AC Decl FC; returns 'FC' although none is marked
			RETURN4,	// [8] Decl = ID DBCOLON TYPE SEMI; returns 'SEMI' although none is marked
			RETURN5,	// [9] Decl = ID DBCOLON TYPE SEMI Decl; returns 'Decl' although none is marked
			new Action() {	// [10] Stmt = ID.l EQ Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			RETURN5,	// [11] Stmt = IF AP Exp FP StmtList; returns 'StmtList' although none is marked
			RETURN7,	// [12] Stmt = IF AP Exp FP StmtList ELSE StmtList; returns 'StmtList' although none is marked
			RETURN5,	// [13] Stmt = ITERATE AP Exp FP Stmt; returns 'Stmt' although none is marked
			Action.RETURN,	// [14] Stmt = Exp
			RETURN2,	// [15] Stmt = READ Lvalue; returns 'Lvalue' although none is marked
			new Action() {	// [16] Stmt = PRINT Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			RETURN2,	// [17] Stmt = RETURN Ret; returns 'Ret' although none is marked
			RETURN3,	// [18] Stmt = Lvalue EQ Exp; returns 'Exp' although none is marked
			new Action() {	// [19] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [20] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN7,	// [21] Stmt = ID AP Exps FP LESSER lst$Lvalue GREATER; returns 'GREATER' although none is marked
			RETURN8,	// [22] Func = ID.a AP ParamList.b FP COLON Return AC StmtList.c FC; returns 'c' although more are marked
			RETURN3,	// [23] StmtList = Stmt.l SEMI StmtList.r; returns 'r' although more are marked
			Action.RETURN,	// [24] StmtList = Stmt.l SEMI
			RETURN3,	// [25] Ret = Exp COMMA Ret; returns 'Ret' although none is marked
			Action.RETURN,	// [26] Ret = Exp
			RETURN3,	// [27] Return = TYPE COMMA Return; returns 'Return' although none is marked
			Action.RETURN,	// [28] Return = TYPE
			RETURN3,	// [29] ParamList = Param COMMA ParamList; returns 'ParamList' although none is marked
			Action.RETURN,	// [30] ParamList = Param
			RETURN3,	// [31] Param = ID DBCOLON TYPE; returns 'TYPE' although none is marked
			Action.RETURN,	// [32] Lvalue = ID
			RETURN4,	// [33] Lvalue = Lvalue LB Exp RB; returns 'RB' although none is marked
			RETURN3,	// [34] Lvalue = Lvalue DOT ID; returns 'ID' although none is marked
			Action.RETURN,	// [35] Exp = Rexp
			RETURN3,	// [36] Rexp = Exp GREATER Exp; returns 'Exp' although none is marked
			RETURN3,	// [37] Rexp = Exp LESSER Exp; returns 'Exp' although none is marked
			RETURN3,	// [38] Rexp = Exp GREATEREQUAL Exp; returns 'Exp' although none is marked
			RETURN3,	// [39] Rexp = Exp LESSEREQUAL Exp; returns 'Exp' although none is marked
			RETURN3,	// [40] Rexp = Exp EQUALTO Exp; returns 'Exp' although none is marked
			RETURN3,	// [41] Rexp = Exp DIF Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [42] Rexp = Aexp
			new Action() {	// [43] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r);
				}
			},
			RETURN3,	// [44] Aexp = Exp SUB Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [45] Aexp = Mexp
			RETURN3,	// [46] Mexp = Exp MULT Exp; returns 'Exp' although none is marked
			RETURN3,	// [47] Mexp = Exp DIV Exp; returns 'Exp' although none is marked
			RETURN3,	// [48] Mexp = Exp RES Exp; returns 'Exp' although none is marked
			Action.RETURN,	// [49] Mexp = Sexp
			RETURN2,	// [50] Sexp = Exp NOT; returns 'NOT' although none is marked
			Action.RETURN,	// [51] Sexp = BOOL
			Action.RETURN,	// [52] Sexp = NULL
			new Action() {	// [53] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new Num(n);
				}
			},
			Action.RETURN,	// [54] Sexp = FLOAT
			Action.RETURN,	// [55] Sexp = CHAR
			Action.RETURN,	// [56] Sexp = Pexp
			RETURN3,	// [57] Pexp = AP Exp FP; returns 'FP' although none is marked
			RETURN4,	// [58] Pexp = TYPE LB Exp RB; returns 'RB' although none is marked
			new Action() {	// [59] Pexp = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Var(l);
				}
			},
			new Action() {	// [60] lst$Exp = Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [61] lst$Exp = lst$Exp Exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.RETURN	// [62] Exps = lst$Exp
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
