package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMGjqbCKPlRkRtGqK0QdbrJG9q816IXC8X8UX2Zv0AmfLgrPijQXKj3vAHMrHg6ajAhH" +
		"IhBpaZI0e2l8MHOC28WXO52Jo551G7Y8W23ZUdVtYpkp#i$xOSqJFoPvpvxltVj$C$vv$$W" +
		"J8R8f#k05$GI$SZZjm9$w4tlWpSj00ZL03f#1K$10$GXtKmu$n4pLCVO4ggVNgc9UBfvN2D" +
		"ho2fLYDDLWheyx5ozYVxAhZw8$zwdFFSQfwRlCeggeZAQFlnLzJHqVVsEXOw36sbxTRRK4f" +
		"FZ96sOh3U00FgQ66vtUqQPYfFiDqe#Vpc8Cjc8Vvts2q1NWDPLXYz7mTAp0JR#7Phncjr7L" +
		"LqIJbVANMp5JlEtCpK0tbpcnJPwRGcMdbpBHpPivsPivpPYvqPYvnPYvpPgvoPgvrPdxlpD" +
		"papDpcpBZyTt6lrtEkjk7#4nvh8FxXpFtRcVcFC$DVPsQOCpFIcHdjp8npPYOwCvETcQdEp" +
		"AlEp1lEp1QiSkRUnplE#NWhDcC3Lg87Uk8Fk1bt8OGT22ACAFhW1mbVFNx2r$ba#PVZQlmM" +
		"FyFfQ8vYd8LpS3ukmgNE#kJZtuKCVVp9$eU8UFfxaAdzJppcp7vuAkMPsSntp0VCFEbHFTx" +
		"36#FXFU7X3VVm7lVmXdXuZtfuWpoyXpsyF0$Fwqpa#wpxkS#w8fzrRNpMjVTPrz5dNIUVTH" +
		"VxhElci#xNFkkkyLbtdSywB#$M$wDlfUVbzS63nknpD$RXKxO3y0ncizt8LUTtQM$jkV95l" +
		"93Yl9JYB4vnbgSuRwOusrESdIddwZ0Eu23Fqj#ICseJZk0GC$zCodo6pp4BH$4npsyVh3So" +
		"jdeEwt1C7KB5xptcgrlLDIrLorAdMQgsfUfQghwbiYoLRQbSIpMqr4yjrTXIPrZgJ4irirI" +
		"1fLfOggMbMbkghQLABFKBItMmrBcMki1IdItrIqjriLHNI$tAKbTOwafB$SPItItrEqjTRw" +
		"aRBNMBfVvegNiiTP#b$cwfHoprBqiDjjHZbXfggH6M6cMfiPQQOAb9bffYgKMMMcQfjosro" +
		"L3$G#9tjyG1270T6j9hiGXNLvdyXg$A5Marhj#gSnLNawkuMbp7dSQLN6skvU1Px#q6wUTm" +
		"zLUVwxyihW3ZevvElr6A2#rwZzFOiSt6HF8uUNhrcUncwz6zHl7oYhdNsNn#4gCqOLqTZOJ" +
		"dTxHOlrokoX8zwz9hmASrvnkCbijUGRQ9da7E9G6EN$rhHijESrMJprTgJO1xxShLOAv9cj" +
		"4hCzzMnkNNvRl8wvw8#ISwLfqqVKx#6VX#PXgaURfQfydbC9VFrKDJVeStunTT0GevDxJWD" +
		"rlB9B$aXA$pzyNtT$onls5w#m7n$S$dUNfEzrTTwLLwbLwbL#7PiqysP$u6R1kY5LUT3RcY" +
		"RViTtjj2D3#9JZRtC0VjzBbApiJcv5oFJ5sUtNozEatEsEeijE78kKf#LEcgArMbgbJ6KwQ" +
		"##Y5ROaD#cn$l5$yRGrUY6H7xwq578fQxXZYVk9Ouav$zdn9Lu$MXWK1m9#DmneEC4uW0CO" +
		"quXPXBr2FAY3nYEL58lCFE#OoR6LioxfBn3aZy8XupCjb8BgEMn2nklvxmnX8Bw5NmjXBFf" +
		"TT2U1U9Lz8xM$Zr4c#XTx7mkoGo1AuM$f348VHk4ZwApLMCa#dr5cy6cnwC2#Zr5s#nn5Nq" +
		"1WbVBt4RlH72zqWyJ6zoZCTrE4WzY#UZfC8JlngzpeorcIypSrvWtNWYbxKhuneN49VHupK" +
		"8b8jt1tKHOr$YLlBsp1sCvVHT0jnF397nEl5w1uHt8wyXdFTAC4luZUHd2B#Tl9NmUyax2Y" +
		"yblrJu8FBkmeUItony77aVuK#JbyPvw04smuZOlVGSzxKM46b5FZPnt97OFSnZvtS8m7iKi" +
		"UlMcvWZntoVn6AElOHnBUDgRkDHydd426A#r6nahfovs1WJ2TxRA8ldWbEbPWkGMKNsTJlz" +
		"USBtSl$akkCOzH7g7OnZk8yXrYsHN2$oiSH2SZuhmQLoh9UpYJrddUIuBYBdzGZr9tWyuL7" +
		"IlmFvQEPvF15UtmYVWSWLqeVNCzA5u7sBmOmtoBxFbct8zGbraDWbSHw3PGaUkKvYJuctIP" +
		"Hd9z9NOgd4XoKEbZXCuXY9aoHEapZBsDO2YOiCRvd4rOQtJk8cmziXSRVXoVmIEPhmea69L" +
		"GolfiGwXfSjCS$mcafiONWo$qJFCJovRj5B34#kIxHxXIUwXwaDlvV4ExtoZZxtU7ZzR1rf" +
		"PEGUDFo2f7w33FwOmKSQVBp1fnXyki7d6doXmHSRV8N1roHuUA2nVx5tqe3qnuzIwRVD6CE" +
		"y7qfa6#L6$b3ISMyLNqcVpAHjp3DgTnfZNsZNHReQTVliN72er9oQrAT#qhQwfJ$UI5QQN6" +
		"SPupXIVcg3RlbcL#yIRnES1TKAudNYDU8LWcysnLbFFKyyIqpLlPuYrcd6cLYjqUmjOfLcR" +
		"nBBDLj6BDLiCV6gPbmNg9SrUubuGJFEksgEPdppgHcQSNvNqpJZ6q1DqMooMYzx$wAQgIOn" +
		"FgdLH3L1ZLVZr5WrHerMezGJsdsF6A7PoFZHIj$X4ijr#unkf#jsjcxdwtQXRXVfTebktz3" +
		"jIjtg$zQejSQedAlLXsg3scMTvG$K0NNGtBfszt$5zX6V47krsgFRtRhzM2hYn$AHqNk7nE" +
		"s6jz4wmiFMvdgYHFyTBOPWIcp9Byfs$B9ins$BvjJDwHTI5$8xCuum4IH21ZBuLHOWOducY" +
		"lWzMiJQ8exLXlaspBLcRCrOp5ZCs9OnN$yl98C8SLqPu2erH8G5qMz11xWk3X5XGTH31xWU" +
		"3X5XGTI73d2j7IGoY80J1HfX8aX4#TqR889e$oNRSA2e");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = Stmt.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [7] Data = DATA TYPE.l AC Decl.t FC SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Node t = (Node) _symbol_t.value;
					return new Data(new Type(l), t);
				}
			},
			new Action() {	// [8] Decl = ID.l DBCOLON TYPE.t SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					return new Decl(new Lvalue(l), new Type(t));
				}
			},
			new Action() {	// [9] Decl = ID.l DBCOLON TYPE.t SEMI Decl.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					return new Decl(new Lvalue(l), new Type(t), r);
				}
			},
			new Action() {	// [10] StmtList = Stmt.l StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new StmtList(l, r);
				}
			},
			new Action() {	// [11] StmtList = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(l);
				}
			},
			new Action() {	// [12] Stmt = ID.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			new Action() {	// [13] Stmt = ITERATE AP Exp.l FP AC StmtList.r FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					 return new Iterate(l, new StmtList(r));
				}
			},
			new Action() {	// [14] Stmt = IF AP Exp.l FP StmtList.r ELSE StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [15] Stmt = IF AP Exp.l FP StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			RETURN2,	// [16] Stmt = Exp SEMI; returns 'SEMI' although none is marked
			new Action() {	// [17] Stmt = READ Lvalue.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Lvalue l = (Lvalue) _symbol_l.value;
					return new Read(l);
				}
			},
			new Action() {	// [18] Stmt = PRINT Exp.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [19] Stmt = RETURN Ret.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Node l = (Node) _symbol_l.value;
					 return new GenRet(l);
				}
			},
			new Action() {	// [20] Stmt = Lvalue.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr(l, r);
				}
			},
			new Action() {	// [21] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [22] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN8,	// [23] Stmt = ID AP Exps FP LESSER lst$Lvalue GREATER SEMI; returns 'SEMI' although none is marked
			new Action() {	// [24] Func = ID.a AP ParamList.b FP COLON Return.c AC StmtList.d FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					return new Func(new Lvalue(a), b, c, d);
				}
			},
			new Action() {	// [25] Func = ID.a AP ParamList.b FP AC StmtList.c FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					return new Func(new Lvalue(a), b, c);
				}
			},
			new Action() {	// [26] Func = ID.a AP FP AC StmtList.b FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Node b = (Node) _symbol_b.value;
					return new Func(new Lvalue(a), b);
				}
			},
			RETURN3,	// [27] Ret = Exp COMMA Ret; returns 'Ret' although none is marked
			Action.RETURN,	// [28] Ret = Exp
			new Action() {	// [29] Return = TYPE.a COMMA Return.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new Return(new Type(a), b);
				}
			},
			new Action() {	// [30] Return = TYPE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					return new Return(new Type(a));
				}
			},
			new Action() {	// [31] ParamList = Param.a COMMA ParamList.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new ParamList(a, b);
				}
			},
			new Action() {	// [32] ParamList = Param.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					return new ParamList(a);
				}
			},
			new Action() {	// [33] Param = ID.a DBCOLON TYPE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final String b = (String) _symbol_b.value;
					return new Param(new Lvalue(a), new Type(b));
				}
			},
			new Action() {	// [34] Lvalue = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Lvalue(l);
				}
			},
			new Action() {	// [35] Lvalue = Lvalue.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			new Action() {	// [36] Lvalue = Lvalue.l DOT ID.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			Action.RETURN,	// [37] Exp = Rexp
			new Action() {	// [38] Rexp = Exp.l GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 0);
				}
			},
			new Action() {	// [39] Rexp = AP Exp.l FP GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 1);
				}
			},
			new Action() {	// [40] Rexp = Exp.l GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 2);
				}
			},
			new Action() {	// [41] Rexp = AP Exp.l FP GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 3);
				}
			},
			new Action() {	// [42] Rexp = Exp.l LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 0);
				}
			},
			new Action() {	// [43] Rexp = AP Exp.l FP LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 1);
				}
			},
			new Action() {	// [44] Rexp = Exp.l LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 2);
				}
			},
			new Action() {	// [45] Rexp = AP Exp.l FP LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 3);
				}
			},
			new Action() {	// [46] Rexp = Exp.l GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 0);
				}
			},
			new Action() {	// [47] Rexp = AP Exp.l FP GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 1);
				}
			},
			new Action() {	// [48] Rexp = Exp.l GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 2);
				}
			},
			new Action() {	// [49] Rexp = AP Exp.l FP GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 3);
				}
			},
			new Action() {	// [50] Rexp = Exp.l LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 0);
				}
			},
			new Action() {	// [51] Rexp = AP Exp.l FP LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 1);
				}
			},
			new Action() {	// [52] Rexp = Exp.l LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 2);
				}
			},
			new Action() {	// [53] Rexp = AP Exp.l FP LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 3);
				}
			},
			new Action() {	// [54] Rexp = Exp.l EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 0);
				}
			},
			new Action() {	// [55] Rexp = AP Exp.l FP EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 1);
				}
			},
			new Action() {	// [56] Rexp = Exp.l EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 2);
				}
			},
			new Action() {	// [57] Rexp = AP Exp.l FP EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 3);
				}
			},
			new Action() {	// [58] Rexp = Exp.l DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 0);
				}
			},
			new Action() {	// [59] Rexp = AP Exp.l FP DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 1);
				}
			},
			new Action() {	// [60] Rexp = Exp.l DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 2);
				}
			},
			new Action() {	// [61] Rexp = AP Exp.l FP DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 3);
				}
			},
			new Action() {	// [62] Rexp = Exp.l AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 0);
				}
			},
			new Action() {	// [63] Rexp = AP Exp.l FP AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 1);
				}
			},
			new Action() {	// [64] Rexp = Exp.l AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 2);
				}
			},
			new Action() {	// [65] Rexp = AP Exp.l FP AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 3);
				}
			},
			Action.RETURN,	// [66] Rexp = Aexp
			new Action() {	// [67] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 0);
				}
			},
			new Action() {	// [68] Aexp = AP Exp.l FP PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 1);
				}
			},
			new Action() {	// [69] Aexp = Exp.l PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 2);
				}
			},
			new Action() {	// [70] Aexp = AP Exp.l FP PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 3);
				}
			},
			new Action() {	// [71] Aexp = Exp.l SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 0);
				}
			},
			new Action() {	// [72] Aexp = AP Exp.l FP SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 1);
				}
			},
			new Action() {	// [73] Aexp = Exp.l SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 2);
				}
			},
			new Action() {	// [74] Aexp = AP Exp.l FP SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 3);
				}
			},
			Action.RETURN,	// [75] Aexp = Mexp
			new Action() {	// [76] Mexp = Exp.l MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 0);
				}
			},
			new Action() {	// [77] Mexp = AP Exp.l FP MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 1);
				}
			},
			new Action() {	// [78] Mexp = Exp.l MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 2);
				}
			},
			new Action() {	// [79] Mexp = AP Exp.l FP MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 3);
				}
			},
			new Action() {	// [80] Mexp = Exp.l DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 0);
				}
			},
			new Action() {	// [81] Mexp = AP Exp.l FP DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 1);
				}
			},
			new Action() {	// [82] Mexp = Exp.l DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 2);
				}
			},
			new Action() {	// [83] Mexp = AP Exp.l FP DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 3);
				}
			},
			new Action() {	// [84] Mexp = Exp.l MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 0);
				}
			},
			new Action() {	// [85] Mexp = AP Exp.l FP MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 1);
				}
			},
			new Action() {	// [86] Mexp = Exp.l MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 2);
				}
			},
			new Action() {	// [87] Mexp = AP Exp.l FP MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 3);
				}
			},
			Action.RETURN,	// [88] Mexp = Sexp
			new Action() {	// [89] Sexp = NOT Exp.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 0);
				}
			},
			new Action() {	// [90] Sexp = NOT AP Exp.l FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 1);
				}
			},
			new Action() {	// [91] Sexp = BOOL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final boolean n = (boolean) _symbol_n.value;
					return new LiteralValue<Boolean>(n);
				}
			},
			new Action() {	// [92] Sexp = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [93] Sexp = CHARESCAPE.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [94] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new LiteralValue<Integer>(n);
				}
			},
			new Action() {	// [95] Sexp = FLOAT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final float n = (float) _symbol_n.value;
					return new LiteralValue<Float>(n);
				}
			},
			new Action() {	// [96] Sexp = CHAR.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Character n = (Character) _symbol_n.value;
					return new LiteralValue<Character>(n);
				}
			},
			Action.RETURN,	// [97] Sexp = Pexp
			new Action() {	// [98] Pexp = Lvalue.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					return l;
				}
			},
			new Action() {	// [99] Pexp = NEW TYPE.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Inst(new Type(l), r);
				}
			},
			new Action() {	// [100] Pexp = NEW TYPE.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					return new Inst(new Type(l));
				}
			},
			Action.RETURN,	// [101] Pexp = ID.l AP Exps FP LB Exp RB
			Action.RETURN,	// [102] Exps = Exp
			RETURN2	// [103] Exps = Exp Exps; returns 'Exps' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
