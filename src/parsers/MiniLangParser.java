package src.parsers;

import src.beaver.*;
import src.ast.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Exemplo.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nzaKbFmq0CXL#Q9kcUfHG857hXX8G4GYgB41m02Oxy8$unK7OeDMyS5qO8TQhFVi$nnDC" +
		"9W1iqqPOt4NIHeeuLzLCawgaLfvSHeeO61dA767qKLPHFVRA9qghEHSXLBuw$$HiwfOKEUi" +
		"YmX5KCiOPrUPTN#U2f8lQ2ivlCRVDTzKuxd4wvDsViyGq1pnfQJEn9ORvoViVYMFMxAUdFh" +
		"yEtzddYc2Gys#WMkeOah2IsN4r4PapRf4vsh6$NyZxfa34vSpMh7v6MxPyodPAIN91pSaLE" +
		"o2MvjZsHjx$qTCFosFA1vSFvh7cl#MFVMwtm#xZsF3so$mlvafbCJB#GP$947cKY3rgznty" +
		"hqo#My#PotdZ6NEZCW3ec0U#wnbiF$n0O8GRVbUX6mW==");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Prog = StmtList
			RETURN3,	// [1] StmtList = Stmt SEMI StmtList; returns 'StmtList' although none is marked
			RETURN2,	// [2] StmtList = Stmt SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [3] Stmt = ID EQ Expr; returns 'Expr' although none is marked
			Action.NONE,  	// [4] opt$StmtList = 
			Action.RETURN,	// [5] opt$StmtList = StmtList
			RETURN6,	// [6] Stmt = Expr IF LB opt$StmtList Els RB; returns 'RB' although none is marked
			Action.RETURN,	// [7] Stmt = Expr
			RETURN2,	// [8] Els = COLON StmtList; returns 'StmtList' although none is marked
			RETURN3,	// [9] Expr = Expr MULT Expr; returns 'Expr' although none is marked
			RETURN3,	// [10] Expr = Expr DIV Expr; returns 'Expr' although none is marked
			RETURN3,	// [11] Expr = Expr PLUS Expr; returns 'Expr' although none is marked
			RETURN3,	// [12] Expr = Expr SUB Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [13] Expr = ID
			Action.RETURN,	// [14] Expr = NUM
			RETURN3	// [15] Expr = AP Expr FP; returns 'FP' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
