package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMWjuLCKLFdTtiviGG4g153LF24Y8Da0mBy3I5aGHgUA3Qgt5ajP7MoW#0XOKgvLQ1PI" +
		"d20Y8W8Bo454GgYY244G4GNa8A6zHH1w223hzT$R0pjczazvyMB2VsNndpl$$vyovSsVklJ" +
		"jtln0b7bJVKYabqJrq6$Malr8lkftke3kLKiVTT5f0gsavRQGjj9NIAPCQH5edODFLrwxrl" +
		"w5ghlLxH#keO#eeBQLHq0w8#WEWlKQ3wMzq67efBOchugRTI$tHCrhz41t36EwdeqRbXzIZ" +
		"z2$QxRdcO1eXQcwb9#XLsaTV63Mzrlg65jBhHh#tQP7wqacYLPMlfOxGUxJIwFS1RQOFQJl" +
		"jgRYMsi5hLuFEeX$HZwakfL1zEeTIurOtBaCzPkqxbDwYzTITRgPRw5QwYzwaDzHs#fG#ev" +
		"tMFgNqODoPLhTcDxP6SgsHPjR8XTP8YJNoCskadJLogJNIsHgvoXhvjJNoMslazzR87wsH7" +
		"jQ8NENtwMwFcUkedpMpZ9ADpC$fxnLarZGozz4$AiYiPMJkfqSgoAmTpLJRo7wDbr4Te#OX" +
		"UjoQETOQ6M#DJBH69biZpreZpraZCwoH5woHETR8N6jalZKop#M#BxTclsEDhAtKasL31Uj" +
		"QprZNuVGL7QUFFLxNViSX7oLGI7sCf$ktf9m49qaDjlO#K$hLT1tTIEVH#TIS2gWLjQNsr9" +
		"5#vVaiWnG8dsMS7gAWgvv8YLftMmaNpQdc9DCWAdNySTbbz1EZya2dkbD37IQYBrrhl#IYp" +
		"NOvdezckcG#xw9DTT6ck6XFksWJNBGdNRJHBbgsjvcZ78zvF$MOb#ynhyXZNXkFUR$mcDV1" +
		"OrudZtbNUioxrcFURppcTVEOvwRz#HJwLccdffNH4EDv5Ftya$wj$T4pDhBO7VZYEENTEEM" +
		"JE6Lld78mJZaYPq5zPCo2d9#lJqQ68RB3Y4X6j8tCpox4pnRPvmgM9bY6O5c2DHIiaM1D16" +
		"igs0M2vGdMGh2MWXKALYnOQy4k4kpdWlrIi8i5kqImomIxNB0h1EiYs3M2THNiUi5k4EntW" +
		"jqas1y4#vDWVn6iZs1z1RjFi0S4UrYmHmKRATWOmSO9zfHWamHxHh1fWaqNR9PWBmhsic2l" +
		"2BPCi1M2hH7i8vCvPB3U#YxPPDmnes3XlQXVxzI2s7ibKX9Lqp4ttS6#gZxkiNDmPoNZlRi" +
		"6jmsikgr#8rSzpQX3Eginj0nHtu7M16f4Tnzbl9Q5V7FqgTZHDe9MR6Wf#0jNzLepBQPc1d" +
		"9ISAI6OhJUQcNZ6P0X#gNYpmUhVArKg6Qjyv2JWptxVwkLoQjM4plxMjZRryRklWxsz$NYL" +
		"ZS#8yKQQOXZDwLSl4LSWFra7ZN3sqGcnfI1YArFvKPdFtPLvFH5ObSv$JlFJFMScUKviz1p" +
		"PiPtCiuplqxVvyZ$$hwlt17akgRh9xBNxF1rtG9lnYqnccpz$PE5tgsilVzVzDYppE2pZDL" +
		"BB7egwzw$6RCmWswHsDN9n35JbR9aUzNIJwbtbLQbLMa$J4qyZzJ93rr81TeNVpz6fdVWfq" +
		"j9CMP1HXfQ8p7pI4NA#51HHTbLh8hzm5cQlaioZJkcCP5Jit$a5vzMi6J#zQS4LXtM2PO7k" +
		"nnM3xcNml8Z#VxsQ8uJ1Uu0dWv$3$mhy0$1Bu4V2hyQVYpyPlWfy7lWPw5VRVZvy7NX5qVg" +
		"1LQoNyz#6uxLaV5UzaUWTOtW18SznkoKCgxBFXrQByPDsBU0TY$ZrkmlXlO8uolONmzj5EC" +
		"JTNj0cyou3veq#FkXpMPj89fC#97G5h8sWVqqQ2iOps7$6hGDZ9UnVm$QhZ1clWdy4ERiy0" +
		"cDzLsO1n$yVYAVOyRS31#STy8nvDO4leWec03SW6DNmgx5CSgW5G9tG$miu4uSlnF72byNE" +
		"7#w5HXhxhl9g0qNh0#jBCAT6k3XN$Pwmku3FXyndb#Q5F710cWyDy6smDCPTmIUp$XguAMC" +
		"RmHUo$WMuAsCRmVUnxWVy7760t0#IOmV0wx7U3GmdtUW2nh4y9r4X7oQ3CDrIpDvh3WcXQ$" +
		"Jhh0cwFiI#kPnR3duGd1SE$Gs3DSvyNL0kBw3vOXT1Oon4Z3DYCJytJW7wvQuF3g7mJM8zM" +
		"QC#uJMy5oU3RuRO0Ti7cmzj3gmLE2rEDyYhlSWy2Kmh1LjWH$8UXiOrjr$TuI7i4x#4R3mF" +
		"0o23O7XUWrWNVs3e#EXSU33e3lmS#3FvJdBXU5P46W7iWAUxqr$N$Qy5lvZd1#ArlHb6xYO" +
		"VMVstTdtuVvypmNuEHFYUGyLi6$3lXtxozXtONzTz5WXdlFGpORMW$rTXjQF$GE6zZ3x8OR" +
		"6puNGU4ERmdwweV5z7bfWQ8lObnlQAlRh36qB#vs6ni#$q253utbEz9tGc2UPtD1hiKznYr" +
		"lwf1ausoMUQ#0MCXPKHgpOfMzRoKFLZLW7b$pE1hx6m3SOkBk1RpDmBmFtCN1$0mymy2033" +
		"pVEgMyK4zzdJg8HNnOpvZ4nVAAHkpecDfNhyRhwQiaubSVapuhYK7qP2sNmCJPAFRXTSby7" +
		"rlV6vCLyvr1xa$FnvyPgqPZ$WBiUoELph4bn7$MXRW$2Fe3Xsr2jXE5fgzw2BOBXMrDXXw7" +
		"mD5PuEgldOS$gNjXRgFSrmjDKhTReNTWx6k4fhSerMWfRej6Ri3SqMWXxLQC5i7aQlGoRez" +
		"5is4oDiCTHpsaq5VQCHfFLEXxzVFM2cWJ$j6OJrLDgWXglngadrLWrHetMwaRTRe2DrEW9t" +
		"JxEPpvSjoFKC3L4ew5YTaR1rciqJRSpTFkYRkVgLl#$W7fTjujrkqotAtIxIhThO#PyTsJc" +
		"UNm7H6p$IRGFzWNiCyq#vV7kqUqdHe#zx3ytj5ryDZiDROjkDwjDaKgQVIK6rXExKGSxbx3" +
		"vudnBlC6Mu3ss1BuvU7FepS0Z5c9BW2Kpzi7y9oqVRxxvqFFn7bm4NeJ#XV25y0Nm1V35yC" +
		"M85wDE3dWEQkUWJmxqfk2vyBc8HInq6hY3VRmVbi0MSk4ETlf#M09Ro0Dty6xWWmLWZjNoj" +
		"2N0Gh14c8zn01Pay#EDtO7vgVL$08lNATC=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = Stmt.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [7] Data = DATA TYPE.l AC Decl.t FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Node t = (Node) _symbol_t.value;
					return new Data(new Type(l), t);
				}
			},
			new Action() {	// [8] Decl = ID.l DBCOLON TYPE.t SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					return new Decl(l, new Type(t));
				}
			},
			new Action() {	// [9] Decl = ID.l DBCOLON TYPE.t SEMI Decl.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					return new Decl(l, new Type(t), r);
				}
			},
			new Action() {	// [10] StmtList = Stmt.l StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new StmtList(l, r);
				}
			},
			new Action() {	// [11] StmtList = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(l);
				}
			},
			new Action() {	// [12] Stmt = ID.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			new Action() {	// [13] Stmt = Lvalue.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr(l, r);
				}
			},
			new Action() {	// [14] Stmt = ITERATE AP Exp.l FP AC StmtList.r FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					 return new Iterate(l, new StmtList(r));
				}
			},
			new Action() {	// [15] Stmt = IF AP Exp.l FP Stmt.r ELSE Stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [16] Stmt = IF AP Exp.l FP Stmt.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			new Action() {	// [17] Stmt = IF AP Exp.l FP AC StmtList.r FC ELSE AC StmtList.s FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [18] Stmt = IF AP Exp.l FP AC StmtList.r FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			RETURN2,	// [19] Stmt = Exp SEMI; returns 'SEMI' although none is marked
			new Action() {	// [20] Stmt = READ Lvalue.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Lvalue l = (Lvalue) _symbol_l.value;
					 return new Read(l);
				}
			},
			new Action() {	// [21] Stmt = PRINT Exp.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [22] Stmt = RETURN Ret.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Node l = (Node) _symbol_l.value;
					 return new GenRet(l);
				}
			},
			new Action() {	// [23] Func = ID.a AP ParamList.b FP COLON Return.c AC StmtList.d FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					return new Func(new Lvalue(a), b, c, d);
				}
			},
			new Action() {	// [24] Func = ID.a AP ParamList.b FP AC StmtList.c FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					return new Func(new Lvalue(a), b, c);
				}
			},
			new Action() {	// [25] Func = ID.a AP FP AC StmtList.b FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Node b = (Node) _symbol_b.value;
					return new Func(new Lvalue(a), b);
				}
			},
			new Action() {	// [26] Ret = Exp.e COMMA Ret.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Node r = (Node) _symbol_r.value;
					return new Ret(e, r);
				}
			},
			new Action() {	// [27] Ret = Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					return new Ret(e);
				}
			},
			new Action() {	// [28] Return = TYPE.a COMMA Return.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new Return(new Type(a), b);
				}
			},
			new Action() {	// [29] Return = TYPE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					return new Return(new Type(a));
				}
			},
			new Action() {	// [30] ParamList = Param.a COMMA ParamList.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new ParamList(a, b);
				}
			},
			new Action() {	// [31] ParamList = Param.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					return new ParamList(a);
				}
			},
			new Action() {	// [32] Param = ID.a DBCOLON TYPE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final String b = (String) _symbol_b.value;
					return new Param(a, new Type(b));
				}
			},
			new Action() {	// [33] Param = ID.a DBCOLON TYPE.b LB Exp.c RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final String b = (String) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Exp c = (Exp) _symbol_c.value;
					return new Param(a, new Type(b), c);
				}
			},
			new Action() {	// [34] Param = ID.a DBCOLON TYPE.b LB RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final String b = (String) _symbol_b.value;
					return new Param(a, new Type(b));
				}
			},
			new Action() {	// [35] Lvalue = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Lvalue(l);
				}
			},
			new Action() {	// [36] Lvalue = Lvalue.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			new Action() {	// [37] Lvalue = Lvalue.l LB Exp.r RB LB Exp.s RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 6];
					final Exp s = (Exp) _symbol_s.value;
					return new Lvalue(l,r,s);
				}
			},
			new Action() {	// [38] Lvalue = Lvalue.l DOT ID.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			Action.RETURN,	// [39] Exp = Rexp
			new Action() {	// [40] Rexp = Exp.l GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 0);
				}
			},
			new Action() {	// [41] Rexp = AP Exp.l FP GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 1);
				}
			},
			new Action() {	// [42] Rexp = Exp.l GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 2);
				}
			},
			new Action() {	// [43] Rexp = AP Exp.l FP GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 3);
				}
			},
			new Action() {	// [44] Rexp = Exp.l LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 0);
				}
			},
			new Action() {	// [45] Rexp = AP Exp.l FP LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 1);
				}
			},
			new Action() {	// [46] Rexp = Exp.l LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 2);
				}
			},
			new Action() {	// [47] Rexp = AP Exp.l FP LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 3);
				}
			},
			new Action() {	// [48] Rexp = Exp.l GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 0);
				}
			},
			new Action() {	// [49] Rexp = AP Exp.l FP GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 1);
				}
			},
			new Action() {	// [50] Rexp = Exp.l GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 2);
				}
			},
			new Action() {	// [51] Rexp = AP Exp.l FP GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 3);
				}
			},
			new Action() {	// [52] Rexp = Exp.l LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 0);
				}
			},
			new Action() {	// [53] Rexp = AP Exp.l FP LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 1);
				}
			},
			new Action() {	// [54] Rexp = Exp.l LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 2);
				}
			},
			new Action() {	// [55] Rexp = AP Exp.l FP LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 3);
				}
			},
			new Action() {	// [56] Rexp = Exp.l EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 0);
				}
			},
			new Action() {	// [57] Rexp = AP Exp.l FP EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 1);
				}
			},
			new Action() {	// [58] Rexp = Exp.l EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 2);
				}
			},
			new Action() {	// [59] Rexp = AP Exp.l FP EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 3);
				}
			},
			new Action() {	// [60] Rexp = Exp.l DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 0);
				}
			},
			new Action() {	// [61] Rexp = AP Exp.l FP DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 1);
				}
			},
			new Action() {	// [62] Rexp = Exp.l DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 2);
				}
			},
			new Action() {	// [63] Rexp = AP Exp.l FP DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 3);
				}
			},
			new Action() {	// [64] Rexp = Exp.l AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 0);
				}
			},
			new Action() {	// [65] Rexp = AP Exp.l FP AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 1);
				}
			},
			new Action() {	// [66] Rexp = Exp.l AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 2);
				}
			},
			new Action() {	// [67] Rexp = AP Exp.l FP AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 3);
				}
			},
			Action.RETURN,	// [68] Rexp = Aexp
			new Action() {	// [69] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 0);
				}
			},
			new Action() {	// [70] Aexp = AP Exp.l FP PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 1);
				}
			},
			new Action() {	// [71] Aexp = Exp.l PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 2);
				}
			},
			new Action() {	// [72] Aexp = AP Exp.l FP PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 3);
				}
			},
			new Action() {	// [73] Aexp = Exp.l SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 0);
				}
			},
			new Action() {	// [74] Aexp = AP Exp.l FP SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 1);
				}
			},
			new Action() {	// [75] Aexp = Exp.l SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 2);
				}
			},
			new Action() {	// [76] Aexp = AP Exp.l FP SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 3);
				}
			},
			Action.RETURN,	// [77] Aexp = Mexp
			new Action() {	// [78] Mexp = Exp.l MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 0);
				}
			},
			new Action() {	// [79] Mexp = AP Exp.l FP MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 1);
				}
			},
			new Action() {	// [80] Mexp = Exp.l MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 2);
				}
			},
			new Action() {	// [81] Mexp = AP Exp.l FP MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 3);
				}
			},
			new Action() {	// [82] Mexp = Exp.l DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 0);
				}
			},
			new Action() {	// [83] Mexp = AP Exp.l FP DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 1);
				}
			},
			new Action() {	// [84] Mexp = Exp.l DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 2);
				}
			},
			new Action() {	// [85] Mexp = AP Exp.l FP DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 3);
				}
			},
			new Action() {	// [86] Mexp = Exp.l MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 0);
				}
			},
			new Action() {	// [87] Mexp = AP Exp.l FP MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 1);
				}
			},
			new Action() {	// [88] Mexp = Exp.l MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 2);
				}
			},
			new Action() {	// [89] Mexp = AP Exp.l FP MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 3);
				}
			},
			Action.RETURN,	// [90] Mexp = Sexp
			new Action() {	// [91] Sexp = NOT Exp.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 0);
				}
			},
			new Action() {	// [92] Sexp = NOT AP Exp.l FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 1);
				}
			},
			new Action() {	// [93] Sexp = BOOL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final boolean n = (boolean) _symbol_n.value;
					return new LiteralValue<Boolean>(n);
				}
			},
			new Action() {	// [94] Sexp = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [95] Sexp = CHARESCAPE.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [96] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new LiteralValue<Integer>(n);
				}
			},
			new Action() {	// [97] Sexp = FLOAT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final float n = (float) _symbol_n.value;
					return new LiteralValue<Float>(n);
				}
			},
			new Action() {	// [98] Sexp = CHAR.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Character n = (Character) _symbol_n.value;
					return new LiteralValue<Character>(n);
				}
			},
			Action.RETURN,	// [99] Sexp = Pexp
			new Action() {	// [100] Pexp = Lvalue.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					return l;
				}
			},
			new Action() {	// [101] Pexp = NEW TYPE.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Inst(new Type(l), r);
				}
			},
			new Action() {	// [102] Pexp = NEW TYPE.l LB RB LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Inst(new Type(l), r, true);
				}
			},
			new Action() {	// [103] Pexp = NEW TYPE.l LB Exp.r RB LB Exp.s RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final Exp s = (Exp) _symbol_s.value;
					return new Inst(new Type(l), r, s);
				}
			},
			new Action() {	// [104] Pexp = NEW TYPE.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					return new Inst(new Type(l));
				}
			},
			new Action() {	// [105] Pexp = ID.l AP Exps.b FP LB Exp.c RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exps b = (Exps) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Exp c = (Exp) _symbol_c.value;
					return new FuncCall(l, b, c);
				}
			},
			new Action() {	// [106] Pexp = ID.l AP Exps.b FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exps b = (Exps) _symbol_b.value;
					return new FuncCall(l, b);
				}
			},
			new Action() {	// [107] Pexp = ID.l AP Exps.b FP LB RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exps b = (Exps) _symbol_b.value;
					return new FuncCall(l, b);
				}
			},
			new Action() {	// [108] Pexp = ID.l AP FP LB Exp.c RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Exp c = (Exp) _symbol_c.value;
					return new FuncCall(l,c);
				}
			},
			new Action() {	// [109] Pexp = ID.l AP FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new FuncCall(l);
				}
			},
			new Action() {	// [110] Exps = Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					 return new Exps(e);
				}
			},
			new Action() {	// [111] Exps = Exp.e COMMA Exps.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final Exps f = (Exps) _symbol_f.value;
					 return new Exps(e, f);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
