package src.parsers;

import src.ast.*;
import java.util.ArrayList;
import src.beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMGcO5CKLVjqznwu4KD4iGVPWaUKCiiYzW2UQ42Cg9l4W9fgWU4GII9Ga6aWa9eWQeYW" +
		"ted89WeeWeAWS0ee8ee8eztt88GhANVvTyt3gpLIHMVo#eDytizzVx$t$U$MwkxghfdgMAE" +
		"TswaMTwQzqE$sU$a3Tg3lzaVv4XLI3Qb9bgaYdKHKwa$Be1tGMvQi1wYZbfkShfGvRzIFq9" +
		"isY9VG1VSWr4#q1bwuEskhGt#avgpx5gDE3UbCVUbOTefcY$lE8z42a3tq1$NLB5Pjs2dq2" +
		"9AlifNMaw3EQPcWPrb9hr07rfT7l7jf6z#AQUfU$5jsd7gS7Z7uJQJAzG2$Iz1EeDPMsqij" +
		"6lzaqW#RIMpJ$VzHwn$Ly6FqcgtMqYXRJRwaBtKgtqLtqAhr2AvmztwVtw2FSfusuJzzpPj" +
		"LsHXeu8wNEI3DdfCmPETyPQUUCj7T6EZWZLpiZrpeZDpWZlt56Rd56kZeZhjLXFVt5kffie" +
		"9xbhKKFqVtEM3zdv55dv75dP90pCjGPUS8PUSeP6UMCZ7L6nZiZRpWZRpiZcp3Vjz1sjGfh" +
		"nhlEh4dqkLfB#sWdxQPbpgmzQZNMqo$f81sYjIapFS1AwLEKudGtLKZgwh5oFmKdI$yPNKU" +
		"$eXzI7MfCpQarNK2Nq4$e2cT#wlKVfeY#$bJz2CMi#b7AqVf#o#pfHS#aQXvv7kr2PBGb#s" +
		"cBDiAY3RDeWotQ08lMtwBzrw8zRD7wMhHQ5iqs4lKop3idmxmc6UQrp32lROPv5sMOzwCCy" +
		"twQOTvL6URz8iEyJXdctPXXdatxtJVeczLisjtqh#Jgu$dKmmkeZ$g29j1Bj9e8kznlqzcc" +
		"xY9VIrCMfYcBqfJrQShcD6L7clAf72jAVlxXZFpR6PcGKdyUCZysk6H4oydyh4IyaiW#LR3" +
		"J1Jj3iEyBLbMmQe9L5wn0i2B1YWKxMx0ImUeALb#mXe8r4knSmPeAraAmLeAr4UmymIuKx6" +
		"B1BXNinu9T9jZbWbqfM4V1VYxODO9TBzWl1VkrO3S9ThDWTmXsfs1$5knlWlrJi0S5#uzWZ" +
		"mZsc6031HiYs731dXHif61Z11ids1p15WYsLB0r1lEm0mtqBYo6VLKEvU9jlWBUB2jY3bN6" +
		"p3aDywKAPicPc1jvc5ssV7BgLR7lguQTNtMkcMXhEdLx7H$dOjFh6NMAy5UC70BC#gqvKeo" +
		"zKqrh5PjMWXbTObHf3kvXzjGrj4nh5U2S2er#DV1sNeIyeXEebOS$p#WNidhOLxSueLerS6" +
		"x9VZxEia2tnwzLn$bycFtoSLxrgG7U3HfYbzc8Il66KDlPCrzVHH5g5yEwdxzivEH7tFVmR" +
		"ElpKWYzlBNoZjFdv8$0TpDIWFbUY9KYJyzELrPbpD9mhGlN0dTM8QhKGhqQEYjrfdlOaJJ1" +
		"FaJgRShz57nNzDJhBxDUV$ZxgbtFPptJbJiS#RoCixDQLijgMIsvQpPNdt3NLOPTLo4rmow" +
		"tH2diSh#zPnlk8a#Qehx#OAo#SGJr9K$fHosLyQ6MnylEiYpBCeEH5#cL#3Mm8r0CXBzTD0" +
		"J2tnYw09S2au3EH7u9yXiayeF5G7rW9T0Ss0nS17mAT00E0jSJHIAmjy1MWkqEMnMTwyA6n" +
		"se0o$KYpTYUpxOzZdKU#rUplG7QPUntOTiDshNityFsVcWtiz#FxM1etTaVoNOYj5xiJsCx" +
		"6zf3x2zakmpQOFRNecaAkntQ6DRseca1UnJQv8GMpM5xEhHPx5Td6uxZ8lORiMq5RKNeCxy" +
		"OV2l6hESnZVNBeVM5lGRnVMRC1dnG9teJxftFV20m1DeTq2gnzZ9u#FlmJ60OVCX#dJ2cLr" +
		"IYMS1oFlu3Y3LXlp$y2zaV3hy3#sFXTs8Vpuv$A$ipuD$5$Zpuzx7$Bdo#Jz6FuGzZVoFyS" +
		"UplWZyruGTpqRm9j0FMG3y0UoKmrxZkgm0yatGdi0fOnw4j71$A5izcB1TZ6S1MGQqte6q3" +
		"HWFR4pbU3B5yn9Q0XEEq1vYTYFchEQSUK9BmOxMXxs6$57eTpgaCNePO3gu7vnF3#GSHFe#" +
		"5qCDdfH3sGt3SUv$7d1w5lnJOGU7$KiZVoSVUZNpCA$ymy$MeTmeGXRyVECBzhu2FPpFm0S" +
		"ozO00mYiTo2X3U$mqWk9$HJLnhFyTxiEtDjbzoZ1FdpjSvdkqajjFPpcGxdoq$zx6bR5Uot" +
		"S2MnpnsRFpuF68gUQnuZ6r5Gpk3xLc6Lioshg7nV8itDxIsRDiP6gypyOw6TXtR6msDrw5u" +
		"LqFZPpn#hw7rPjlNq1vXEyZGHh0TSqnZFj7aXZw5xGnRtD5dZaLR87ciin5ROkZTKlejD$m" +
		"rXh$Py7SQ$bx3FvJqStp3ppNyKmq$p$0BadvqSTAd9i3Kury$yRFg1SPrbHX#Jpv6BKDxKD" +
		"R8uU#js3biMyYuLyt8FTUeqr$cnOOOUQqC$OAKlFQI#yVcLSUKl4ufrofuAZ27kxfZKPwpN" +
		"eJIFcg5RZy7i5gfzm7i2DJRm7nW3l0wW9L5lGIy04m0dj6znW3BjFS1y9xsy1sW5caFAw5Q" +
		"e3siyMgUzh0ggzdQcmcyfZrycwZfsfiAJD7UYy3psiDtktfMU#E0iTeRhVW$eEeLDKcDWXs" +
		"fsTFgAVMa6g6UKCFLC3LK3T4gledK8EqDJbmjznt8zYFTZjVjSxgThDjfkdrLjxDqErUtR#" +
		"ds7TqkqUrIe#eMOBDQeRQAKTwazgfzvj6r#jdN7dPR2jz6QgTcEtJxYMwtSqRYMhRfTXThk" +
		"urQ6zbkCBILudhtYuFVHctqxvOX$3JR56#aPNWpBSExQMFmnj1BmKlndff05AZ0lWy41YBK" +
		"6lcjjPw3cPmBn84Otke2mCCkAm0yl847GFYVfW0xsl1$En4WmDxMmwuo0AAC#F#1UzXF1q2" +
		"K4RTm3xlg08WouXbm3tjq7uW0dXEDDAA03yJn$km1FhNz2k0Iurm=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Prog
			new Action() {	// [1] Prog = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [2] Prog = Stmt.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [3] Prog = Func.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [4] Prog = Func.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [5] Prog = Data.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new Prog(l);
				}
			},
			new Action() {	// [6] Prog = Data.l Prog.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new Prog(l, r);
				}
			},
			new Action() {	// [7] Data = DATA TYPE.l AC Decl.t FC SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Node t = (Node) _symbol_t.value;
					return new Data(new Type(l), t);
				}
			},
			new Action() {	// [8] Decl = ID.l DBCOLON TYPE.t SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					return new Decl(l, new Type(t));
				}
			},
			new Action() {	// [9] Decl = ID.l DBCOLON TYPE.t SEMI Decl.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					return new Decl(l, new Type(t), r);
				}
			},
			new Action() {	// [10] StmtList = Stmt.l StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final Node r = (Node) _symbol_r.value;
					 return new StmtList(l, r);
				}
			},
			new Action() {	// [11] StmtList = Stmt.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(l);
				}
			},
			new Action() {	// [12] Stmt = ID.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr((String)l, r);
				}
			},
			new Action() {	// [13] Stmt = ITERATE AP Exp.l FP AC Stmt.r FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					 return new Iterate(l, r);
				}
			},
			new Action() {	// [14] Stmt = IF AP Exp.l FP StmtList.r ELSE StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [15] Stmt = IF AP Exp.l FP StmtList.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			new Action() {	// [16] Stmt = IF AP Exp.l FP AC StmtList.r FC ELSE AC StmtList.s FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					final Symbol _symbol_s = _symbols[offset + 10];
					final Node s = (Node) _symbol_s.value;
					 return new IfElse(l, r, s);
				}
			},
			new Action() {	// [17] Stmt = IF AP Exp.l FP AC StmtList.r FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Node r = (Node) _symbol_r.value;
					 return new IfElse(l, r);
				}
			},
			RETURN2,	// [18] Stmt = Exp SEMI; returns 'SEMI' although none is marked
			new Action() {	// [19] Stmt = READ Lvalue.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Lvalue l = (Lvalue) _symbol_l.value;
					return new Read(l);
				}
			},
			new Action() {	// [20] Stmt = PRINT Exp.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Exp e = (Exp) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [21] Stmt = RETURN Ret.l SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Node l = (Node) _symbol_l.value;
					 return new GenRet(l);
				}
			},
			new Action() {	// [22] Stmt = Lvalue.l EQ Exp.r SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					 return new Attr(l, r);
				}
			},
			new Action() {	// [23] lst$Lvalue = Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [24] lst$Lvalue = lst$Lvalue Lvalue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			RETURN6,	// [25] Stmt = ID.a AP Exps.b FP LESSER lst$Lvalue.c GREATER SEMI; returns 'c' although more are marked
			new Action() {	// [26] Func = ID.a AP ParamList.b FP COLON Return.c AC StmtList.d FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 8];
					final Node d = (Node) _symbol_d.value;
					return new Func(new Lvalue(a), b, c, d);
				}
			},
			new Action() {	// [27] Func = ID.a AP ParamList.b FP AC StmtList.c FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Node c = (Node) _symbol_c.value;
					return new Func(new Lvalue(a), b, c);
				}
			},
			new Action() {	// [28] Func = ID.a AP FP AC StmtList.b FC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Node b = (Node) _symbol_b.value;
					return new Func(new Lvalue(a), b);
				}
			},
			new Action() {	// [29] Ret = Exp.e COMMA Ret.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Node r = (Node) _symbol_r.value;
					return new Ret(e, r);
				}
			},
			new Action() {	// [30] Ret = Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					return new Ret(e);
				}
			},
			new Action() {	// [31] Return = TYPE.a COMMA Return.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new Return(new Type(a), b);
				}
			},
			new Action() {	// [32] Return = TYPE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					return new Return(new Type(a));
				}
			},
			new Action() {	// [33] ParamList = Param.a COMMA ParamList.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Node b = (Node) _symbol_b.value;
					return new ParamList(a, b);
				}
			},
			new Action() {	// [34] ParamList = Param.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Node a = (Node) _symbol_a.value;
					return new ParamList(a);
				}
			},
			new Action() {	// [35] Param = ID.a DBCOLON TYPE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final String b = (String) _symbol_b.value;
					return new Param(a, new Type(b));
				}
			},
			new Action() {	// [36] Lvalue = ID.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					return new Lvalue(l);
				}
			},
			new Action() {	// [37] Lvalue = Lvalue.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			new Action() {	// [38] Lvalue = Lvalue.l DOT ID.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final String r = (String) _symbol_r.value;
					return new Lvalue(l,r);
				}
			},
			Action.RETURN,	// [39] Exp = Rexp
			new Action() {	// [40] Rexp = Exp.l GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 0);
				}
			},
			new Action() {	// [41] Rexp = AP Exp.l FP GREATER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 1);
				}
			},
			new Action() {	// [42] Rexp = Exp.l GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 2);
				}
			},
			new Action() {	// [43] Rexp = AP Exp.l FP GREATER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Greater(l, r, 3);
				}
			},
			new Action() {	// [44] Rexp = Exp.l LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 0);
				}
			},
			new Action() {	// [45] Rexp = AP Exp.l FP LESSER Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 1);
				}
			},
			new Action() {	// [46] Rexp = Exp.l LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 2);
				}
			},
			new Action() {	// [47] Rexp = AP Exp.l FP LESSER AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Lesser(l, r, 3);
				}
			},
			new Action() {	// [48] Rexp = Exp.l GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 0);
				}
			},
			new Action() {	// [49] Rexp = AP Exp.l FP GREATEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 1);
				}
			},
			new Action() {	// [50] Rexp = Exp.l GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 2);
				}
			},
			new Action() {	// [51] Rexp = AP Exp.l FP GREATEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new GreaterEqual(l, r, 3);
				}
			},
			new Action() {	// [52] Rexp = Exp.l LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 0);
				}
			},
			new Action() {	// [53] Rexp = AP Exp.l FP LESSEREQUAL Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 1);
				}
			},
			new Action() {	// [54] Rexp = Exp.l LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 2);
				}
			},
			new Action() {	// [55] Rexp = AP Exp.l FP LESSEREQUAL AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new LesserEqual(l, r, 3);
				}
			},
			new Action() {	// [56] Rexp = Exp.l EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 0);
				}
			},
			new Action() {	// [57] Rexp = AP Exp.l FP EQUALTO Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 1);
				}
			},
			new Action() {	// [58] Rexp = Exp.l EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 2);
				}
			},
			new Action() {	// [59] Rexp = AP Exp.l FP EQUALTO AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Equal(l, r, 3);
				}
			},
			new Action() {	// [60] Rexp = Exp.l DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 0);
				}
			},
			new Action() {	// [61] Rexp = AP Exp.l FP DIF Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 1);
				}
			},
			new Action() {	// [62] Rexp = Exp.l DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 2);
				}
			},
			new Action() {	// [63] Rexp = AP Exp.l FP DIF AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Dif(l, r, 3);
				}
			},
			new Action() {	// [64] Rexp = Exp.l AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 0);
				}
			},
			new Action() {	// [65] Rexp = AP Exp.l FP AND Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 1);
				}
			},
			new Action() {	// [66] Rexp = Exp.l AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 2);
				}
			},
			new Action() {	// [67] Rexp = AP Exp.l FP AND AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new And(l, r, 3);
				}
			},
			Action.RETURN,	// [68] Rexp = Aexp
			new Action() {	// [69] Aexp = Exp.l PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 0);
				}
			},
			new Action() {	// [70] Aexp = AP Exp.l FP PLUS Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 1);
				}
			},
			new Action() {	// [71] Aexp = Exp.l PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 2);
				}
			},
			new Action() {	// [72] Aexp = AP Exp.l FP PLUS AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Add(l, r, 3);
				}
			},
			new Action() {	// [73] Aexp = Exp.l SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 0);
				}
			},
			new Action() {	// [74] Aexp = AP Exp.l FP SUB Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 1);
				}
			},
			new Action() {	// [75] Aexp = Exp.l SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 2);
				}
			},
			new Action() {	// [76] Aexp = AP Exp.l FP SUB AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Sub(l, r, 3);
				}
			},
			Action.RETURN,	// [77] Aexp = Mexp
			new Action() {	// [78] Mexp = Exp.l MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 0);
				}
			},
			new Action() {	// [79] Mexp = AP Exp.l FP MULT Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 1);
				}
			},
			new Action() {	// [80] Mexp = Exp.l MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 2);
				}
			},
			new Action() {	// [81] Mexp = AP Exp.l FP MULT AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mult(l, r, 3);
				}
			},
			new Action() {	// [82] Mexp = Exp.l DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 0);
				}
			},
			new Action() {	// [83] Mexp = AP Exp.l FP DIV Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 1);
				}
			},
			new Action() {	// [84] Mexp = Exp.l DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 2);
				}
			},
			new Action() {	// [85] Mexp = AP Exp.l FP DIV AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Div(l, r, 3);
				}
			},
			new Action() {	// [86] Mexp = Exp.l MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 0);
				}
			},
			new Action() {	// [87] Mexp = AP Exp.l FP MOD Exp.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 1);
				}
			},
			new Action() {	// [88] Mexp = Exp.l MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 2);
				}
			},
			new Action() {	// [89] Mexp = AP Exp.l FP MOD AP Exp.r FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 6];
					final Exp r = (Exp) _symbol_r.value;
					return new Mod(l, r, 3);
				}
			},
			Action.RETURN,	// [90] Mexp = Sexp
			new Action() {	// [91] Sexp = NOT Exp.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 0);
				}
			},
			new Action() {	// [92] Sexp = NOT AP Exp.l FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final Exp l = (Exp) _symbol_l.value;
					return new Not(l, 1);
				}
			},
			new Action() {	// [93] Sexp = BOOL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final boolean n = (boolean) _symbol_n.value;
					return new LiteralValue<Boolean>(n);
				}
			},
			new Action() {	// [94] Sexp = NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [95] Sexp = CHARESCAPE.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					return new LiteralValue<String>(n);
				}
			},
			new Action() {	// [96] Sexp = INT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					return new LiteralValue<Integer>(n);
				}
			},
			new Action() {	// [97] Sexp = FLOAT.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final float n = (float) _symbol_n.value;
					return new LiteralValue<Float>(n);
				}
			},
			new Action() {	// [98] Sexp = CHAR.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Character n = (Character) _symbol_n.value;
					return new LiteralValue<Character>(n);
				}
			},
			Action.RETURN,	// [99] Sexp = Pexp
			new Action() {	// [100] Pexp = Lvalue.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final Lvalue l = (Lvalue) _symbol_l.value;
					return l;
				}
			},
			new Action() {	// [101] Pexp = NEW TYPE.l LB Exp.r RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Exp r = (Exp) _symbol_r.value;
					return new Inst(new Type(l), r);
				}
			},
			new Action() {	// [102] Pexp = NEW TYPE.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 2];
					final String l = (String) _symbol_l.value;
					return new Inst(new Type(l));
				}
			},
			new Action() {	// [103] Pexp = ID.l AP Exps.b FP LB Exp.c RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Exps b = (Exps) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final Exp c = (Exp) _symbol_c.value;
					return new FuncCall(l, b, c);
				}
			},
			new Action() {	// [104] Exps = Exp.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					 return new Exps(e);
				}
			},
			new Action() {	// [105] Exps = Exp.e Exps.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Exp e = (Exp) _symbol_e.value;
					final Symbol _symbol_f = _symbols[offset + 2];
					final Exps f = (Exps) _symbol_f.value;
					 return new Exps(e, f);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
