
//Nathan Toschi Reis / 201865064C
//Felippe Rocha Lobo de Abreu / 201765185AC

%package "src.parsers";
%import "src.ast.*";
%import "src.beaver.*";

%class "MiniLangParser";

%terminals ID, INT, TYPE, FLOAT, CHAR, BOOL, NULL, NOT,   
           MULT, PLUS, SUB, DIV, RES, 
           EQ, IF, ELSE, ITERATE,
           RB, LB, AP, FP, AC, FC, SEMI, DOT,
           READ, PRINT, RETURN,
           GREATER, LESSER, GREATEREQUAL, LESSEREQUAL, EQUALTO, DIF,
           COMMA, COLON, DBCOLON;
           
%left COMMA;
%left ELSE;
%left FP;
%left MULT, DIV, RES;
%left PLUS, SUB;

%typeof INT = "Integer";
%typeof TYPE = "String";
%typeof FLOAT = "float";
%typeof BOOL = "boolean";
%typeof CHAR = "char";
%typeof Exp = "Node";
%typeof Pexp = "Node";
%typeof Sexp = "Node";
%typeof Mexp = "Node";
%typeof Aexp = "Node";
%typeof Rexp = "Node";
%typeof Exps = "Node";
%typeof ID = "String";
%typeof Lvalue = "String";
%typeof Stmt = "Node";
%typeof StmtList = "Node";
%typeof Prog = "Node";
%typeof ParamList = "Node";
%typeof Param = "Node";
%typeof Func = "Node";
%typeof Return = "Node";
%typeof FuncStmtList = "Node";
%typeof FuncStmt = "Node";
%typeof Ret = "Node";

%goal Prog;

Prog = StmtList
     | Func
     | Func StmtList                     
     ;

StmtList = Stmt SEMI StmtList     
         | Stmt SEMI  
         ;

Stmt = ID EQ Exp
     | IF AP Exp FP Stmt
     | IF AP Exp FP Stmt ELSE Stmt             
     | ITERATE AP Exp FP Stmt                        
     | Exp
     | READ Lvalue               
     | PRINT Exp                   
     | RETURN Exp+ 
     | Lvalue EQ Exp           
     | ID AP Exps FP LESSER Lvalue+ GREATER                      
     ;

Func = ID AP ParamList FP COLON Return AC FuncStmtList RETURN Ret SEMI FC
     ;

FuncStmtList = FuncStmt SEMI FuncStmtList     
         | FuncStmt SEMI  
         ;

FuncStmt = ID EQ Exp
     | IF AP Exp FP Stmt
     | IF AP Exp FP Stmt ELSE Stmt             
     | ITERATE AP Exp FP Stmt                        
     | Exp
     | READ Lvalue               
     | PRINT Exp                   
     | Lvalue EQ Exp           
     | ID AP Exps FP LESSER Lvalue+ GREATER                      
     ;

Ret = Exp COMMA Ret
     | Exp
     ;

Return = TYPE COMMA Return
          | TYPE
     ;

ParamList = Param COMMA ParamList
          | Param
          ;

Param = ID DBCOLON TYPE 
     ;

Lvalue = ID 
     | Lvalue LB Exp RB  
     | Lvalue DOT ID   
     ;

Exp = Rexp
;

Rexp = Exp GREATER Exp
     | Exp LESSER Exp          
     | Exp GREATEREQUAL Exp    
     | Exp LESSEREQUAL Exp     
     | Exp EQUALTO Exp         
     | Exp DIF Exp  
     | Aexp
;

Aexp = Exp PLUS  Exp           
     | Exp SUB  Exp
     | Mexp  
;
      
Mexp = Exp MULT  Exp           
     | Exp DIV  Exp
     | Exp RES  Exp  
     | Sexp                          
;

Sexp = Exp NOT
     | BOOL                        
     | NULL                     
     | INT                       
     | FLOAT                          
     | CHAR
     | Pexp                                                     
;

Pexp = AP Exp FP                        
     | TYPE LB Exp RB
     | ID             
;

Exps = Exp+
;

