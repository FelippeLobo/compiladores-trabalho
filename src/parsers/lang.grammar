//Nathan Toschi Reis / 201865064C
//Felippe Rocha Lobo de Abreu / 201765185AC

%package "src.parsers";
%import "src.ast.*";
%import "src.beaver.*";

%class "MiniLangParser";

%terminals ID, INT, TYPE, FLOAT, CHAR, BOOL, NULL, NOT,   
           MULT, PLUS, SUB, DIV, RES, 
           EQ, IF, ELSE, ITERATE,
           RB, LB, AP, FP, AC, FC, SEMI, DOT,
           READ, PRINT, RETURN,
           GREATER, LESSER, GREATEREQUAL, LESSEREQUAL, EQUALTO, DIF,
           COMMA, COLON, DBCOLON;
           
%left COMMA;
%left ELSE;
%left FP;
%left MULT, DIV, RES;
%left PLUS, SUB;

%typeof ID = "String";
%typeof INT = "Integer";
%typeof TYPE = "String";
%typeof FLOAT = "float";
%typeof BOOL = "boolean";
%typeof CHAR = "char";
%typeof Exp = "Exp";
%typeof Pexp = "Exp";
%typeof Sexp = "Exp";
%typeof Mexp = "Exp";
%typeof Aexp = "Exp";
%typeof Rexp = "Exp";
%typeof Exps = "Exp";
%typeof Lvalue = "String";
%typeof Stmt = "Node";
%typeof Prog = "Node";
%typeof ParamList = "Node";
%typeof Param = "Node";
%typeof Func = "Node";
%typeof Return = "Node";
%typeof StmtList = "Node";
%typeof Ret = "Node";
%typeof Data = "Node";
%typeof Decl = "Node";

%goal Prog;

Prog = Stmt.l SEMI            {: return new Prog(l);:}
     | Stmt.l SEMI Prog.r     {: return new Prog(l, r);:}
     | Func.l                 {: return new Prog(l);:}
     | Func.l Prog.r          {: return new Prog(l, r);:}
     | Data.l                 {: return new Prog(l);:}
     | Data.l Prog.r          {: return new Prog(l, r);:}               
     ;

Data = ID AC Decl FC
     ;

Decl = ID DBCOLON TYPE SEMI
     | ID DBCOLON TYPE SEMI Decl
     ;

Stmt = ID.l EQ Exp.r                   {: return new Attr((String)l, r);:}
     | IF AP Exp FP Stmt
     | IF AP Exp FP Stmt ELSE Stmt             
     | ITERATE AP Exp FP Stmt                        
     | Exp
     | READ Lvalue               
     | PRINT Exp.e                      {: return new Print(e);:} 
     | RETURN Ret 
     | Lvalue EQ Exp           
     | ID AP Exps FP LESSER Lvalue+ GREATER                      
     ;

Func = ID.a AP ParamList.b FP COLON Return AC StmtList.c FC
     ;
StmtList = Stmt SEMI StmtList     
         | Stmt SEMI         
         ;


Ret = Exp COMMA Ret
     | Exp
     ;

Return = TYPE COMMA Return
          | TYPE
     ;

ParamList = Param COMMA ParamList
          | Param
          ;

Param = ID DBCOLON TYPE 
     ;

Lvalue = ID.l 
     | Lvalue LB Exp RB  
     | Lvalue DOT ID   
     ;

Exp = Rexp
;

Rexp = Exp.l GREATER Exp.r            {:return new Greater(l, r);:}
     | Exp.l LESSER Exp.r             {:return new Lesser(l, r);:}       
     | Exp.l GREATEREQUAL Exp.r       {:return new GreaterEqual(l, r);:}
     | Exp.l LESSEREQUAL Exp.r        {:return new LesserEqual(l, r);:}
     | Exp.l EQUALTO Exp.r            {:return new Equal(l, r);:}
     | Exp.l DIF Exp.r                {:return new Dif(l, r);:}
     | Aexp
;

Aexp = Exp.l PLUS  Exp.r      {:return new Add(l, r);:}          
     | Exp.l SUB  Exp.r       {:return new Sub(l, r);:}  
     | Mexp  
;
      
Mexp = Exp.l MULT Exp.r       {:return new Mult(l, r);:}      
     | Exp.l DIV Exp.r        {:return new Div(l, r);:}
     | Exp.l RES Exp.r        {:return new Res(l, r);:}
     | Sexp                          
;

Sexp = Exp NOT
     | BOOL.n            {:return new LiteralValue<Boolean>(n);:}                      
     | NULL                                   
     | INT.n             {:return new LiteralValue<Integer>(n);:}                   
     | FLOAT.n           {:return new LiteralValue<Float>(n);:}           
     | CHAR.n            {:return new LiteralValue<Character>(n);:}     
     | Pexp                                                     
;

Pexp = AP Exp FP                        
     | TYPE LB Exp RB
     | ID.l             {:return new Var(l);:}
;

Exps = Exp+
;