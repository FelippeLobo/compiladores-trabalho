%package "parsers";
%import "ast.*";

%class "LangParser";

%terminals  ID, INT, TYPE, FLOAT, CHAR, BOOL, NULL, 
            ADD, MULT, SUB, DIV, SEP, PRINT, READ, DEFOP, RBRACK, 
            LBRACK, RPAREN, LPAREN, RES, EQUAL, EQUALTO, DIF, NOT, 
            GREATER, LESSER, GREATEREQUAL, LESSEREQUAL, AND, OR, COLON,
            DOUBLECOLON, SEMICOLON, RBRACE, LBRACE, IF, ELSE, ELSEIF, 
            RETURN, NEW, ITERATE;
            PRIVATE, PUBLIC, PROTECTED;


//Prescedencia
%left FP;
%left MULT;
%left PLUS;

%typeof INT = "Integer";
%typeof FLOAT = "Float";
%typeof Expr = "Expr";
%typeof ID = "String";
%typeof Stmt = "Node";
%typeof StmtList = "Node";
%typeof Prog = "Node";

%goal Prog;

Prog = StmtList.s                     {:  return s;     :}  
     ;

StmtList = Stmt.s SEMICOLON StmtList.l     {: return new StmtList(s,l); :}
         | Stmt.s SEMICOLON                {: return s; :}  
         ;

Stmt = ID.s EQUAL Expr.e                             {: return new Attr(new ID(s), e); :}
     | Expr.e IF LB Stmt.s RB COLON LB Stmt.a RB  {: return new If(e,s,a);          :}
     | Expr.e IF LB Stmt.s RB                     {: return new If(e,s);            :}
     | Expr.e                                     {: return new Print(e);           :}
     ;


      
Expr = Expr.a MULT  Expr.b           {: return new Mul(a,b);                :}
     | Expr.a PLUS  Expr.b           {: return new Add(a, b);               :}
     | ID.v                          {: return new ID(v);                   :}
     | NUM.n                         {: return new Num(n);                  :}
     | AP Expr.e FP                  {: return e;                  :}
     ;




//data
DataDeclaration = DATA TYPE LBRACE dataBody RBRACE;

DataBody =  variableDeclarationList;

VariableDeclarationList = variableDeclaration variableDeclaration*;

VariableDeclaration = ID DOUBLECOLON typeOrLiteral SEMICOLON;


TypeOrLiteral = TYPE | STRING | INT | FLOAT | CHAR | BOOL; {: return typeOrLiteral() :}


//function
Function = ID  LPAREN parameter | parameterList  RPAREN LBRACE functionBody RBRACE;

ParametroList = parametro*;

Parametro = typeOrLiteral ID COLON | null;

functionBody = body RETURN typeOrLiteral;
//
