%package "parsers";
%import "ast.*";

%class "LangParser";

%terminals  ID, INT, TYPE, FLOAT, CHAR, BOOL, NULL, 
            ADD, MULT, SUB, DIV, SEP, PRINT, READ, DEFOP, RBRACK, 
            LBRACK, RPAREN, LPAREN, RES, EQUAL, EQUALTO, DIF, NOT, 
            GREATER, LESSER, GREATEREQUAL, LESSEREQUAL, AND, OR, COLON,
            DOUBLECOLON, SEMICOLON, RBRACE, LBRACE, IF, ELSE, ELSEIF, 
            RETURN, NEW, ITERATE;


//Prescedencia
%left FP;
%left MULT;
%left PLUS;

%typeof INT = "Integer";
%typeof FLOAT = "Float";
%typeof Expr = "Expr";
%typeof ID = "String";
%typeof Stmt = "Node";
%typeof StmtList = "Node";
%typeof Prog = "Node";

%goal Prog;

Prog = StmtList.s                     {:  return s;     :}  
     ;

StmtList = Stmt.s SEMI StmtList.l     {: return new StmtList(s,l); :}
         | Stmt.s SEMI                {: return s; :}  
         ;

Stmt = ID.s EQ Expr.e                             {: return new Attr(new ID(s), e); :}
     | Expr.e IF LB Stmt.s RB COLON LB Stmt.a RB  {: return new If(e,s,a);          :}
     | Expr.e IF LB Stmt.s RB                     {: return new If(e,s);            :}
     | Expr.e                                     {: return new Print(e);           :}
     ;
      
Expr = Expr.a MULT  Expr.b           {: return new Mul(a,b);                :}
     | Expr.a PLUS  Expr.b           {: return new Add(a, b);               :}
     | ID.v                          {: return new ID(v);                   :}
     | NUM.n                         {: return new Num(n);                  :}
     | AP Expr.e FP                  {: return e;                  :}
     ;

dataDeclaration = DATA TYPE LBRACE dataBody RBRACE;

dataBody =  variableDeclarationList;

variableDeclarationList = variableDeclaration*;

variableDeclaration = identificador DOUBLECOLON typeOrLiteral SEMICOLON;


typeOrLiteral = TYPE | STRING | INT | FLOAT | CHAR | BOOL; {: return typeOrLiteral()}


//function
function = typeOrLiteral identificador LPAREN parametroList | parametro RPAREN LBRACE functionBody RBRACE;

parametroList = parametro*;

parametro = typeOrLiteral identificador COLON | null;

functionBody = variasCoisa RETURN typeOrLiteral;
//










data Carro { 
    modelo :: String;
    placa :: String;
    serie :: Int;
}

     Expr
   /   |         \
Expr MULT        Expr
|           /       |   \
ID          Expr PLUS Expr
|           |           |
A           Num         ID
            |           |
            2           B