package parsers;

import ast.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Exemplo.grammar".
 */
public class MiniLangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njajjkmZ0GH2SNGa982g7q1Y#e4afR2P10IEMDF#iljz1xOJksDvAHMEciPyVhs8a3O8i" +
		"A4KBvGYQlo4KmG88Bb6WZbbyxUuUXUYuRhuN2wbJ#aA63N6i$P#ZIJrJtxRfRz723IrpXMh" +
		"xb4v0VTfViYVdCYhk2lG52zkRq4ftjgUUoyneTszEqJpfSzlqMJ#FM5NngX#T9kJBb6oVSS" +
		"$G26nLnPm26wWLcdep9lNfJCZDQwmTI6oqC3WkIaYLPaMSo9skoqRwTjxxhwKh7Plz9CwVr" +
		"ar#h5v97hwuzFOA67EGeUzKVv5tsihFL6yw5kUk0NomY8Qk8zm1x5#PVA3dswHVs5Wo14c7" +
		"m3vbLFl0=");

	private final Action[] actions;

	public MiniLangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Prog = StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					  return s;
				}
			},
			new Action() {	// [1] StmtList = Stmt.s SEMI StmtList.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Node l = (Node) _symbol_l.value;
					 return new StmtList(s,l);
				}
			},
			new Action() {	// [2] StmtList = Stmt.s SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [3] Stmt = ID.s EQ Expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return new Attr(new ID(s), e);
				}
			},
			Action.NONE,  	// [4] opt$StmtList = 
			Action.RETURN,	// [5] opt$StmtList = StmtList
			new Action() {	// [6] Stmt = Expr.e IF LB opt$StmtList.s Els.a RB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Node s = (Node) _symbol_s.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Node a = (Node) _symbol_a.value;
					 return new If(e,s,a);
				}
			},
			new Action() {	// [7] Stmt = Expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new Print(e);
				}
			},
			new Action() {	// [8] Els = COLON StmtList.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 2];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [9] Expr = Expr.a MULT Expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a,b);
				}
			},
			new Action() {	// [10] Expr = Expr.a PLUS Expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [11] Expr = ID.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final String v = (String) _symbol_v.value;
					 return new ID(v);
				}
			},
			new Action() {	// [12] Expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Num(n);
				}
			},
			new Action() {	// [13] Expr = AP Expr.e FP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
